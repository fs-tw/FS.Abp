//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating Repositories and a Unit of Work for EF Core model.
// 4.2.2
//
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace FS.FormManagement.Versions
{
    public partial class EfCoreVersionDefinitionRepository : IVersionDefinitionRepository
    {
        public async Task<VersionDefinition> Find<TEntity>(string entityKey = null)
            where TEntity : IVersion
        {
            var entityType = typeof(TEntity).Name;
            var query = (await this.GetQueryableAsync()).IncludeDetails(true);
            return await query.
                Where(x => x.EntityType == entityType && x.EntityKey == entityKey)
                .SingleOrDefaultAsync();
        }

        public async Task<VersionDefinition> FindOrInsertAsync<TEntity>(
            string entityKey = null,
            Action<VersionDefinition> action = null)
            where TEntity : IVersion
        {
            var entityType = typeof(TEntity).Name;
            var definition = await Find<TEntity>(entityKey);

            if (definition != null)
                return definition;

            var definitionId = this.GuidGenerator.Create();
            var versionId = this.GuidGenerator.Create();

            definition = new VersionDefinition(definitionId, CurrentTenant.Id)
            {
                EntityType = entityType,
                EntityKey = entityKey,
            };
            action?.Invoke(definition);

            await this.InsertAsync(definition);
            return definition;
        }


    }
}
