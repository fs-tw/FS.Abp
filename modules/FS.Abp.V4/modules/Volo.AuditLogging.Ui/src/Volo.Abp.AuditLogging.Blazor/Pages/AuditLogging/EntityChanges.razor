@attribute [Authorize(AbpAuditLoggingPermissions.AuditLogs.Default)]
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Auditing
@inherits AbpAuditLoggingComponentBase

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Fields Horizontal="true">
            <Field ColumnSize="@ColumnSize.Is3">
                <FieldLabel>@L["EntityChangeStartTime"]</FieldLabel>
                <DateEdit @bind-Date="@Filter.StartDate" Max="@Filter.EndDate" />
            </Field>
            <Field ColumnSize="@ColumnSize.Is3">
                <FieldLabel>@L["EntityChangeEndTime"]</FieldLabel>
                <DateEdit @bind-Date="@Filter.EndDate" Min="@Filter.StartDate" />
            </Field>
            <Field ColumnSize="@ColumnSize.Is3">
                <FieldLabel>@L["ChangeType"]</FieldLabel>
                <Select TValue="EntityChangeType?" @bind-SelectedValue="@Filter.EntityChangeType">
                    <SelectItem Value="@NullEntityChangeValue"></SelectItem>
                    @foreach (var entityChangeType in GetEntityChangeTypeList())
                    {
                        <SelectItem Value="@entityChangeType">@entityChangeType</SelectItem>
                    }
                </Select>
            </Field>
            <Field ColumnSize="@ColumnSize.Is3">
                <FieldLabel>@L["EntityTypeFullName"]</FieldLabel>
                <TextEdit @bind-Text="@Filter.EntityTypeFullName" />
            </Field>
        </Fields>
        <Fields Horizontal="true">
            <Field ColumnSize="@ColumnSize.Is12" class="mb-0">
                <Button Block="true"
                        Color="@Color.Primary"
                        Clicked="@GetEntitiesAsync">
                    <Icon Name="IconName.Search" />
                </Button>
            </Field>
        </Fields>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<DataGrid TItem="EntityChangeDto"
          Data="EntityChangeList"
          ReadData="OnDataGridReadAsync"
          TotalItems="TotalCount"
          ShowPager="true"
          PageSize="PageSize">
    <DataGridColumns>
        <DataGridEntityActionsColumn TItem="EntityChangeDto">
            <DisplayTemplate>
                <EntityActions TItem="EntityChangeDto">
                    <EntityAction TItem="EntityChangeDto"
                                  Clicked="@(() => OpenDetailModalAsync(context.Id))"
                                  Text="@L["ChangeDetails"]" />
                    <EntityAction TItem="EntityChangeDto"
                                  Clicked="@(() => OpenDetailModalAsync(context.EntityTypeFullName, context.EntityId))"
                                  Text="@L["FullChangeHistory"]" />
                </EntityActions>
            </DisplayTemplate>
        </DataGridEntityActionsColumn>
        <DataGridColumn TItem="EntityChangeDto" Field="@nameof(EntityChangeDto.ChangeTime)" Caption="@L["ChangeTime"]">
            <DisplayTemplate>
                @(context.ChangeTime)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="EntityChangeDto" Field="@nameof(EntityChangeDto.ChangeType)" Caption="@L["ChangeType"]">
            <DisplayTemplate>
                @(context.ChangeType)
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="EntityChangeDto" Field="@nameof(EntityChangeDto.TenantId)" Caption="@L["TenantId"]">
            <DisplayTemplate>
                @{
                    var tenantId = context.TenantId;

                    if (tenantId == null)
                    {
                        <span>null</span>
                    }
                    else
                    {
                        <span>@tenantId</span>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="EntityChangeDto" Field="@nameof(EntityChangeDto.EntityTypeFullName)" Caption="@L["EntityTypeFullName"]">
            <DisplayTemplate>
                @{
                    var entityTypeFullName = context.EntityTypeFullName;

                    <span @onclick="@(e => Filter.EntityTypeFullName = entityTypeFullName)">
                        @entityTypeFullName
                    </span>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@* ************************* DETAIL MODAL ************************* *@
<Modal @ref="@DetailModal">
    <ModalBackdrop />
    <ModalContent Size="@ModalSize.Large" IsCentered="true">
        <ModalHeader>
            <ModalTitle>
                @if (EntityHistories?.Count > 0)
                {
                    @EntityChangeList[0].EntityTypeFullName <br /> <span style='font-size:small'>("@EntityChangeList[0].EntityId")</span>
                }
            </ModalTitle>
            <CloseButton Clicked="@CloseDetailModalAsync" />
        </ModalHeader>
        <ModalBody>
            @if (EntityHistories != null)
            {
                @foreach (var entityChangeWithUsername in EntityHistories)
                {
                    var entityChangeId = entityChangeWithUsername.EntityChange.Id;
                    var entityChangeType = entityChangeWithUsername.EntityChange.ChangeType;
                    var entityChangeTime = entityChangeWithUsername.EntityChange.ChangeTime;

                    @if (!EntityChangesPanelStatus.ContainsKey(entityChangeId))
                    {
                        EntityChangesPanelStatus.Add(entityChangeId, EntityHistories[0].EntityChange.Id == entityChangeId);
                    }

                    <Accordion>
                        <Collapse Visible="@EntityChangesPanelStatus[entityChangeId]">
                            <CollapseHeader>
                                <Button Color="@Color.Primary"
                                        Block="true"
                                        Clicked="@(() => EntityChangesPanelStatus[entityChangeId] = !EntityChangesPanelStatus[entityChangeId])">
                                    @if (string.IsNullOrEmpty(entityChangeWithUsername.UserName))
                                    {
                                        @string.Format(L["DaysAgoTitle"].Value, L[entityChangeType.ToString()].Value, entityChangeTime);
                                    }
                                    else
                                    {
                                        @string.Format(L["DaysAgoWithUserTitle"].Value, L[entityChangeType.ToString()].Value, entityChangeTime, entityChangeWithUsername.UserName);
                                    }
                                </Button>
                            </CollapseHeader>
                            <CollapseBody>
                                <Table>
                                    <TableHeader>
                                        <TableRow>
                                            <TableHeaderCell>@L["PropertyName"]</TableHeaderCell>
                                            <TableHeaderCell>@L["OriginalValue"]</TableHeaderCell>
                                            <TableHeaderCell>@L["NewValue"]</TableHeaderCell>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        @foreach (var propertyChange in entityChangeWithUsername.EntityChange.PropertyChanges.OrderBy(x => x.PropertyName))
                                        {
                                            <TableRow>
                                                <TableRowCell>@propertyChange.PropertyName</TableRowCell>
                                                <TableRowCell>@propertyChange.OriginalValue</TableRowCell>
                                                @{
                                                    var color = TextColor.None;
                                                }
                                                @if (entityChangeType != EntityChangeType.Created && (propertyChange.NewValue != propertyChange.OriginalValue))
                                                {
                                                    color = TextColor.Danger;
                                                }
                                                <TableRowCell TextColor="@color">@propertyChange.NewValue</TableRowCell>

                                            </TableRow>
                                        }
                                    </TableBody>
                                </Table>
                            </CollapseBody>
                        </Collapse>
                    </Accordion>
                }
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="@Color.Secondary" Clicked="@CloseDetailModalAsync">@L["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>