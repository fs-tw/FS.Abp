//------------------------------------------------------------------------------
// This code was generated by YinChang.
// 4.0.0
//
//------------------------------------------------------------------------------
using FS.Cms.Blogs.Dtos;
using FS.Cms.Posts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;

namespace FS.Cms.Blogs
{
    public partial class BlogCrudAppService : IBlogCrudAppService
    {

        private IPostsStore _postsStore => this.LazyServiceProvider.LazyGetRequiredService<IPostsStore>();
        
        public async override Task DeleteAsync(BlogPrimaryKeyDto id)
        {
            var query = await this._repository.GetQueryableAsync();
            var blogNotClassified = query.Where(x => x.No == "CmsBlogNotClassified").FirstOrDefault();
            
            var postQuery = await _postsStore.Post.GetQueryableAsync();
            var posts = postQuery.Where(x => x.BlogId == id.Id).ToList();
            
            foreach (var post in posts)
            {
                post.BlogId = blogNotClassified.Id;
                await this._postsStore.Post.UpdateAsync(post);
            }

            await base.DeleteAsync(id);
        }

        public async Task<PagedResultDto<BlogWithDetailsDto>> GetBlogs(GetBlogsInput input, bool isFront = false)
        {
            var query = (await this._repository.WithDetailsAsync())
                .WhereIf(isFront, x => !x.Disable)
                .WhereIf(!String.IsNullOrEmpty(input.Keyword), x => x.DisplayName.Trim().ToLower().Contains(input.Keyword.Trim().ToLower()));

            var totalCount = await this.AsyncExecuter.CountAsync(query);

            if (String.IsNullOrEmpty(input.Sorting)) input.Sorting = "sequence";

            var items = await this.AsyncExecuter.ToListAsync(query
                .OrderBy(input.Sorting)
                    .ThenBy(x => x.Sequence)
                .Skip(input.SkipCount)
                .Take(input.MaxResultCount));

            return new PagedResultDto<BlogWithDetailsDto>()
            {
                TotalCount = totalCount,
                Items = ObjectMapper.Map<List<Blog>, List<BlogWithDetailsDto>>(items)
            };
        }
    }
}
