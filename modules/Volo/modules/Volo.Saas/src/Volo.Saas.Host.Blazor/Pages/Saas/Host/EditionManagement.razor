@page "/saas/host/editions"
@attribute [Authorize(SaasHostPermissions.Editions.Default)]
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.FeatureManagement.Blazor.Components
@using Volo.Saas.Host.Dtos
@using Volo.Saas.Localization
@inject AbpBlazorMessageLocalizerHelper<SaasResource> LH

@inherits AbpCrudPageBase<IEditionAppService, EditionDto, Guid, GetEditionsInput, EditionCreateDto, EditionUpdateDto>

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Editions"]" BreadcrumbItems="@BreadcrumbItems">
    @if (HasCreatePermission)
    {
        <Column ColumnSize="ColumnSize.IsAuto" Class="px-1 pt-2">
            <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">
                <Icon Name="IconName.Add" Class="mr-1"></Icon>@L["NewEdition"]
            </Button>
        </Column>

    }
</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="EditionSearchForm">
            <Fields Horizontal="true">
                <Field ColumnSize="ColumnSize.Is11" Margin="Margin.Is0.FromBottom">
                    <TextEdit Placeholder="@L["Search"]" @bind-Text="@GetListInput.Filter" />
                </Field>
                <Field ColumnSize="ColumnSize.Is1" Margin="Margin.Is0.FromBottom">
                    <Button form="EditionSearchForm"
                            Type="ButtonType.Submit"
                            Block="true"
                            Color="Color.Primary"
                            Clicked="GetEntitiesAsync">
                        <Icon Name="IconName.Search" />
                    </Button>
                </Field>
            </Fields>
        </Form>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<DataGrid TItem="EditionDto"
          Data="Entities"
          ReadData="OnDataGridReadAsync"
          TotalItems="TotalCount"
          ShowPager="true"
          PageSize="PageSize">
    <DataGridColumns>
        <DataGridEntityActionsColumn TItem="EditionDto" @ref="@EntityActionsColumn">
            <DisplayTemplate>
                <EntityActions TItem="EditionDto" EntityActionsColumn="@EntityActionsColumn">
                    <EntityAction TItem="EditionDto"
                                  RequiredPolicy="@UpdatePolicyName"
                                  Clicked="() => OpenEditModalAsync(context)"
                                  Text="@L["Edit"]" />
                    <EntityAction TItem="EditionDto"
                                  RequiredPolicy="@ManageFeaturesPolicyName"
                                  Clicked="() => FeatureManagementModal.OpenAsync(FeatureProviderName, context.Id.ToString())"
                                  Text="@L["Features"]" />
                    <EntityAction TItem="EditionDto"
                                  RequiredPolicy="@DeletePolicyName"
                                  Clicked="() => DeleteEntityAsync(context)"
                                  ConfirmationMessage="() => GetDeleteConfirmationMessage(context)"
                                  Text="@L["Delete"]" />
                </EntityActions>
            </DisplayTemplate>
        </DataGridEntityActionsColumn>
        <DataGridColumn TItem="EditionDto" Field="@nameof(EditionDto.DisplayName)" Caption="@L["EditionName"].Value">
            <DisplayTemplate>
                @(context.DisplayName)
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Modal @ref="CreateModal">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form id="EditionCreateForm">
                <ModalHeader>
                    <ModalTitle>@L["NewEdition"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["EditionName"]</FieldLabel>
                                <TextEdit @bind-Text="@NewEntity.DisplayName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                    <Button form="EditionCreateForm" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Color="Color.Primary" Clicked="CreateEntityAsync">@L["Save"]</Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <Modal @ref="EditModal">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form id="EditionEditForm">
                <ModalHeader>
                    <ModalTitle>@L["Edit"]</ModalTitle>
                    <CloseButton Clicked="CloseEditModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                        <Validation>
                            <Field>
                                <FieldLabel>@L["EditionName"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingEntity.DisplayName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                    <Button form="EditionEditForm" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Color="Color.Primary" Clicked="UpdateEntityAsync">@L["Save"]</Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@if (HasManageFeaturesPermission)
{
    <FeatureManagementModal @ref="FeatureManagementModal" />
}
