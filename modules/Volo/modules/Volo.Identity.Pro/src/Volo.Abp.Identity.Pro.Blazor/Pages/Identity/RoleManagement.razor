@page "/identity/roles"
@attribute [Authorize(IdentityPermissions.Roles.Default)]
@using Volo.Abp.Identity
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Identity.Localization
@using Volo.Abp.PermissionManagement.Blazor.Components
@inject AbpBlazorMessageLocalizerHelper<IdentityResource> LH
@inherits AbpCrudPageBase<IIdentityRoleAppService, IdentityRoleDto, Guid, GetIdentityRoleListInput, IdentityRoleCreateDto, IdentityRoleUpdateDto>
@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Roles"]" BreadcrumbItems="@BreadcrumbItems">
    @if (HasCreatePermission)
    {
        <Column ColumnSize="ColumnSize.IsAuto" Class="px-1 pt-2">
            <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">
                <Icon Name="IconName.Add" Class="mr-1"></Icon>@L["NewRole"]
            </Button>
        </Column>
    }
</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>
        <Form id="IdentityRoleSearchForm">
            <Fields Horizontal="true">
                <Field ColumnSize="ColumnSize.Is11" class="mb-0">
                    <TextEdit Placeholder="@L["Search"]" @bind-Text="@GetListInput.Filter" />
                </Field>
                <Field ColumnSize="ColumnSize.Is1" class="mb-0">
                    <Button form="IdentityRoleSearchForm"
                            Block="true"
                            Type="ButtonType.Submit"
                            PreventDefaultOnSubmit="true"
                            Color="Color.Primary"
                            Clicked="GetEntitiesAsync">
                        <Icon Name="IconName.Search" />
                    </Button>
                </Field>
            </Fields>
        </Form>
    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<DataGrid TItem="IdentityRoleDto"
          Data="Entities"
          ReadData="OnDataGridReadAsync"
          TotalItems="TotalCount"
          ShowPager="true"
          PageSize="PageSize">
    <DataGridColumns>
        <DataGridEntityActionsColumn TItem="IdentityRoleDto" @ref="EntityActionsColumn">
            <DisplayTemplate>
                <EntityActions TItem="IdentityRoleDto" EntityActionsColumn="@EntityActionsColumn">
                    <EntityAction TItem="IdentityRoleDto"
                                  RequiredPolicy="@UpdatePolicyName"
                                  Clicked="() => OpenEditModalAsync(context)"
                                  Text="@L["Edit"]">
                    </EntityAction>
                    <EntityAction TItem="IdentityRoleDto"
                                  RequiredPolicy="@ManagePermissionsPolicyName"
                                  Clicked="() => PermissionManagementModal.OpenAsync(PermissionProviderName, context.Name)"
                                  Text="@L["Permissions"]">
                    </EntityAction>
                    <EntityAction TItem="IdentityRoleDto"
                                  ConfirmationMessage="() => GetDeleteConfirmationMessage(context)"
                                  RequiredPolicy="@DeletePolicyName"
                                  Clicked="() => DeleteEntityAsync(context)"
                                  Text="@L["Delete"]"></EntityAction>
                </EntityActions>
            </DisplayTemplate>
        </DataGridEntityActionsColumn>
        <DataGridColumn TItem="IdentityRoleDto" Field="@nameof(IdentityRoleDto.Name)" Caption="@L["RoleName"].Value">
            <DisplayTemplate>
                @(context.Name)
                @if (context.IsDefault)
                {
                    <Badge Color="Color.Primary">@L["DisplayName:IsDefault"]</Badge>
                }
                @if (context.IsPublic)
                {
                    <Badge Color="Color.Light">@L["DisplayName:IsPublic"]</Badge>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Modal @ref="CreateModal">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form id="IdentityRoleCreateForm">
                <ModalHeader>
                    <ModalTitle>@L["NewRole"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["DisplayName:RoleName"]</FieldLabel>
                                <TextEdit @bind-Text="NewEntity.Name">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Field>
                            <Check TValue="bool" @bind-Checked="NewEntity.IsDefault">@L["DisplayName:IsDefault"]</Check>
                            <Check TValue="bool" @bind-Checked="NewEntity.IsPublic">@L["DisplayName:IsPublic"]</Check>
                        </Field>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                    <Button form="IdentityRoleCreateForm" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Color="Color.Primary" Clicked="CreateEntityAsync">@L["Save"]</Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <Modal @ref="EditModal">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form id="IdentityRoleEditForm">
                <ModalHeader>
                    <ModalTitle>@L["Edit"]</ModalTitle>
                    <CloseButton Clicked="CloseEditModalAsync"/>
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                        <input type="hidden" name="ConcurrencyStamp" @bind-value="EditingEntity.ConcurrencyStamp"/>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["DisplayName:RoleName"]</FieldLabel>
                                <TextEdit @bind-Text="EditingEntity.Name">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Field>
                            <Check TValue="bool" @bind-Checked="@EditingEntity.IsDefault">@L["DisplayName:IsDefault"]</Check>
                            <Check TValue="bool" @bind-Checked="@EditingEntity.IsPublic">@L["DisplayName:IsPublic"]</Check>
                        </Field>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                    <Button form="IdentityRoleEditForm" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Color="Color.Primary" Clicked="UpdateEntityAsync">@L["Save"]</Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@if (HasManagePermissionsPermission)
{
    <PermissionManagementModal @ref="PermissionManagementModal" />
}
