{"version":3,"sources":["../libs/crm/proxy/src/lib/crm/customers/customer-discriminator.enum.ts","../libs/crm/proxy/src/lib/crm/consultation-records/consultation-records-api.service.ts","../libs/crm/proxy/src/lib/crm/customers/customers-api.service.ts","../libs/crm/proxy/src/lib/crm/definitions/definitions.service.ts","../libs/crm/proxy/src/lib/crm/employees/employees-api.service.ts","../../libs/crm/proxy/src/lib/crm/gender-type.enum.ts","../libs/crm/proxy/src/lib/crm/projects/projects-api.service.ts"],"names":["CustomerDiscriminator","restService","_this","this","apiName","createByConsultationRecordCreate","ConsultationRecordCreate","request","method","url","body","deleteByConsultationRecordPrimaryKey","ConsultationRecordPrimaryKey","params","id","getByConsultationRecordPrimaryKey","getListByConsultationRecordGetList","ConsultationRecordGetList","fields","value","sorting","skipCount","maxResultCount","updateByConsultationRecordPrimaryKeyAndConsultationRecordUpdate","ConsultationRecordUpdate","Injectable","args","providedIn","RestService","customerDiscriminatorOptions","mapEnumToOptions","createByCustomerCreate","CustomerCreate","deleteByCustomerPrimaryKey","CustomerPrimaryKey","getByCustomerPrimaryKey","getListByCustomerGetList","CustomerGetList","updateByCustomerPrimaryKeyAndCustomerUpdate","CustomerUpdate","getBasicDataDefinition","createByEmployeeCreate","EmployeeCreate","deleteByEmployeePrimaryKey","EmployeePrimaryKey","getByEmployeePrimaryKey","getListByEmployeeGetList","EmployeeGetList","updateByEmployeePrimaryKeyAndEmployeeUpdate","EmployeeUpdate","GenderType","createByProjectCreate","ProjectCreate","deleteByProjectPrimaryKey","ProjectPrimaryKey","getByProjectPrimaryKey","getListByProjectGetList","ProjectGetList","updateByProjectPrimaryKeyAndProjectUpdate","ProjectUpdate","genderTypeOptions"],"mappings":"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","sourcesContent":["import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum CustomerDiscriminator {\r\n  客戶 = 0,\r\n  個人 = 1,\r\n  企業 = 2,\r\n}\r\n\r\nexport const customerDiscriminatorOptions = mapEnumToOptions(CustomerDiscriminator);\r\n","import type { ConsultationRecordCreateDto, ConsultationRecordGetListDto, ConsultationRecordPrimaryKeyDto, ConsultationRecordUpdateDto, ConsultationRecordWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConsultationRecordsApiService {\r\n  apiName = 'Default';\r\n\r\n  createByConsultationRecordCreate = (ConsultationRecordCreate: ConsultationRecordCreateDto) =>\r\n    this.restService.request<any, ConsultationRecordWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/crm/consultationrecords/consultation-record`,\r\n      body: ConsultationRecordCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByConsultationRecordPrimaryKey = (ConsultationRecordPrimaryKey: ConsultationRecordPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/crm/consultationrecords/consultation-record/id`,\r\n      params: { id: ConsultationRecordPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByConsultationRecordPrimaryKey = (ConsultationRecordPrimaryKey: ConsultationRecordPrimaryKeyDto) =>\r\n    this.restService.request<any, ConsultationRecordWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/crm/consultationrecords/consultation-record/id`,\r\n      params: { id: ConsultationRecordPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByConsultationRecordGetList = (ConsultationRecordGetList: ConsultationRecordGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<ConsultationRecordWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/crm/consultationrecords/consultation-record`,\r\n      params: { fields: ConsultationRecordGetList.fields, value: ConsultationRecordGetList.value, sorting: ConsultationRecordGetList.sorting, skipCount: ConsultationRecordGetList.skipCount, maxResultCount: ConsultationRecordGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByConsultationRecordPrimaryKeyAndConsultationRecordUpdate = (ConsultationRecordPrimaryKey: ConsultationRecordPrimaryKeyDto, ConsultationRecordUpdate: ConsultationRecordUpdateDto) =>\r\n    this.restService.request<any, ConsultationRecordWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/crm/consultationrecords/consultation-record/id`,\r\n      params: { id: ConsultationRecordPrimaryKey.id },\r\n      body: ConsultationRecordUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { CustomerCreateDto, CustomerGetListDto, CustomerPrimaryKeyDto, CustomerUpdateDto, CustomerWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomersApiService {\r\n  apiName = 'Default';\r\n\r\n  createByCustomerCreate = (CustomerCreate: CustomerCreateDto) =>\r\n    this.restService.request<any, CustomerWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/crm/customers/customer`,\r\n      body: CustomerCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByCustomerPrimaryKey = (CustomerPrimaryKey: CustomerPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/crm/customers/customer/id`,\r\n      params: { id: CustomerPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByCustomerPrimaryKey = (CustomerPrimaryKey: CustomerPrimaryKeyDto) =>\r\n    this.restService.request<any, CustomerWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/crm/customers/customer/id`,\r\n      params: { id: CustomerPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByCustomerGetList = (CustomerGetList: CustomerGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<CustomerWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/crm/customers/customer`,\r\n      params: { fields: CustomerGetList.fields, value: CustomerGetList.value, sorting: CustomerGetList.sorting, skipCount: CustomerGetList.skipCount, maxResultCount: CustomerGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByCustomerPrimaryKeyAndCustomerUpdate = (CustomerPrimaryKey: CustomerPrimaryKeyDto, CustomerUpdate: CustomerUpdateDto) =>\r\n    this.restService.request<any, CustomerWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/crm/customers/customer/id`,\r\n      params: { id: CustomerPrimaryKey.id },\r\n      body: CustomerUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { SelectOptionDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DefinitionsService {\r\n  apiName = 'Default';\r\n\r\n  getBasicDataDefinition = () =>\r\n    this.restService.request<any, SelectOptionDto[]>({\r\n      method: 'GET',\r\n      url: `/api/crm/definitions/basic-data-definition`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { EmployeeCreateDto, EmployeeGetListDto, EmployeePrimaryKeyDto, EmployeeUpdateDto, EmployeeWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeesApiService {\r\n  apiName = 'Default';\r\n\r\n  createByEmployeeCreate = (EmployeeCreate: EmployeeCreateDto) =>\r\n    this.restService.request<any, EmployeeWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/crm/employees/employee`,\r\n      body: EmployeeCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByEmployeePrimaryKey = (EmployeePrimaryKey: EmployeePrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/crm/employees/employee/id`,\r\n      params: { id: EmployeePrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByEmployeePrimaryKey = (EmployeePrimaryKey: EmployeePrimaryKeyDto) =>\r\n    this.restService.request<any, EmployeeWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/crm/employees/employee/id`,\r\n      params: { id: EmployeePrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByEmployeeGetList = (EmployeeGetList: EmployeeGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<EmployeeWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/crm/employees/employee`,\r\n      params: { fields: EmployeeGetList.fields, value: EmployeeGetList.value, sorting: EmployeeGetList.sorting, skipCount: EmployeeGetList.skipCount, maxResultCount: EmployeeGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByEmployeePrimaryKeyAndEmployeeUpdate = (EmployeePrimaryKey: EmployeePrimaryKeyDto, EmployeeUpdate: EmployeeUpdateDto) =>\r\n    this.restService.request<any, EmployeeWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/crm/employees/employee/id`,\r\n      params: { id: EmployeePrimaryKey.id },\r\n      body: EmployeeUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum GenderType {\r\n  男 = 0,\r\n  女 = 1,\r\n  不公開 = 3,\r\n}\r\n\r\nexport const genderTypeOptions = mapEnumToOptions(GenderType);\r\n","import type { ProjectCreateDto, ProjectGetListDto, ProjectPrimaryKeyDto, ProjectUpdateDto, ProjectWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProjectsApiService {\r\n  apiName = 'Default';\r\n\r\n  createByProjectCreate = (ProjectCreate: ProjectCreateDto) =>\r\n    this.restService.request<any, ProjectWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/crm/projects/project`,\r\n      body: ProjectCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByProjectPrimaryKey = (ProjectPrimaryKey: ProjectPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/crm/projects/project/id`,\r\n      params: { id: ProjectPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByProjectPrimaryKey = (ProjectPrimaryKey: ProjectPrimaryKeyDto) =>\r\n    this.restService.request<any, ProjectWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/crm/projects/project/id`,\r\n      params: { id: ProjectPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByProjectGetList = (ProjectGetList: ProjectGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<ProjectWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/crm/projects/project`,\r\n      params: { fields: ProjectGetList.fields, value: ProjectGetList.value, sorting: ProjectGetList.sorting, skipCount: ProjectGetList.skipCount, maxResultCount: ProjectGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByProjectPrimaryKeyAndProjectUpdate = (ProjectPrimaryKey: ProjectPrimaryKeyDto, ProjectUpdate: ProjectUpdateDto) =>\r\n    this.restService.request<any, ProjectWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/crm/projects/project/id`,\r\n      params: { id: ProjectPrimaryKey.id },\r\n      body: ProjectUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}