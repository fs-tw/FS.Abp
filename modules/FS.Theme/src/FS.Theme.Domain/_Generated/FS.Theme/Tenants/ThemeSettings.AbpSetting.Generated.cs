//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the template for generating AbpSettings.
// 4.2.1
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
using Volo.Abp.Domain.Services;
using System.Threading.Tasks;
using Volo.Abp.DependencyInjection;
using FS.Abp.SettingManagement;
using Volo.Abp.Localization;
using Volo.Abp.Settings;
using Volo.Abp.SettingManagement;
using FS.Theme.Localization;


namespace FS.Theme.Tenants
{
    public partial class ThemeSettingNames
    {
        public partial class ThemeSettings
        {
            private const string Prefix = "FS.Theme.Tenants.ThemeSettings";
            private const string LogoInfo = Prefix + ".LogoInfo";
            public const string LogoInfoLogo = LogoInfo + ".Logo";
            public const string LogoInfoUrl = LogoInfo + ".Url";
            private const string WebInfo = Prefix + ".WebInfo";
            public const string WebInfoTitle = WebInfo + ".Title";
            public const string WebInfoFavicon = WebInfo + ".Favicon";
            public const string WebInfoCount = WebInfo + ".Count";
            public const string WebInfoCopyright = WebInfo + ".Copyright";
        }
    }
    public partial class ThemeSettingsSettingDefinitionProvider : SettingDefinitionProvider
    {
        public override void Define(ISettingDefinitionContext context)
        {
            context.Add(
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.LogoInfoLogo, @"", L("DisplayName:ThemeSettings.Logo"), L("Description:ThemeSettings.Logo"), false).WithProperty("Type","String"),
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.LogoInfoUrl, @"", L("DisplayName:ThemeSettings.Url"), L("Description:ThemeSettings.Url"), false).WithProperty("Type","String"),
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.WebInfoTitle, @"", L("DisplayName:ThemeSettings.Title"), L("Description:ThemeSettings.Title"), false).WithProperty("Type","String"),
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.WebInfoFavicon, @"", L("DisplayName:ThemeSettings.Favicon"), L("Description:ThemeSettings.Favicon"), false).WithProperty("Type","String"),
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.WebInfoCount, @"", L("DisplayName:ThemeSettings.Count"), L("Description:ThemeSettings.Count"), false).WithProperty("Type","Int32"),
                        new SettingDefinition(ThemeSettingNames.ThemeSettings.WebInfoCopyright, @"", L("DisplayName:ThemeSettings.Copyright"), L("Description:ThemeSettings.Copyright"), false).WithProperty("Type","String")
                        );
        }
        private static LocalizableString L(string name)
        {
            return LocalizableString.Create<ThemeResource>(name);
        }
    }
    public partial interface IThemeSettingsFactory : FS.Abp.Settings.IFactory<ThemeSettings>, ITransientDependency { }
    public partial class ThemeSettingsFactory : DomainService, IThemeSettingsFactory
    {
        public ISettingManager SettingManager => this.LazyServiceProvider.LazyGetRequiredService<ISettingManager>();

        public ISettingProvider SettingProvider => this.LazyServiceProvider.LazyGetRequiredService<ISettingProvider>();

        public async Task<ThemeSettings> GetAsync(string providerName = null, string providerKey = null, bool fallback = true)
        {
            var result = new ThemeSettings();
            result.LogoInfo.Logo = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.LogoInfoLogo, providerName, providerKey, fallback);
            result.LogoInfo.Url = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.LogoInfoUrl, providerName, providerKey, fallback);
            result.WebInfo.Title = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.WebInfoTitle, providerName, providerKey, fallback);
            result.WebInfo.Favicon = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.WebInfoFavicon, providerName, providerKey, fallback);
            result.WebInfo.Count = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.WebInfoCount, providerName, providerKey, result.WebInfo.Count, fallback);
            result.WebInfo.Copyright = await this.TryGetAsync(ThemeSettingNames.ThemeSettings.WebInfoCopyright, providerName, providerKey, fallback);
            return result;
        }

        public async Task SetAsync(ThemeSettings input, string providerName, string providerKey)
        {
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.LogoInfoLogo, input.LogoInfo.Logo.ToString(), providerName, providerKey);
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.LogoInfoUrl, input.LogoInfo.Url.ToString(), providerName, providerKey);
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.WebInfoTitle, input.WebInfo.Title.ToString(), providerName, providerKey);
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.WebInfoFavicon, input.WebInfo.Favicon.ToString(), providerName, providerKey);
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.WebInfoCount, input.WebInfo.Count.ToString(), providerName, providerKey);
            await this.TrySetAsync(ThemeSettingNames.ThemeSettings.WebInfoCopyright, input.WebInfo.Copyright.ToString(), providerName, providerKey);
        }
    }
}
