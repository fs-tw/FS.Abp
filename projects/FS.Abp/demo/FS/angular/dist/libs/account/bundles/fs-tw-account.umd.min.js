!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@angular/router"),require("@angular/common/http"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/forms"),require("@ngxs/store"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@fs-tw/account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@angular/router","@angular/common/http","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/forms","@ngxs/store","@angular/animations"],e):e(((n="undefined"!=typeof globalThis?globalThis:n||self)["fs-tw"]=n["fs-tw"]||{},n["fs-tw"].account={}),n.i1,n.ng_theme_shared,n.ng.core,n.ngBootstrap,n.core,n.ng.router,n.ng.common.http,n.i2,n.rxjs,n.rxjs.operators,n.snq,n.ng.forms,n.store,n.ng.animations)}(this,(function(n,e,t,r,o,a,i,s,c,p,l,u,d,m,f){"use strict";function b(n){return n&&"object"==typeof n&&"default"in n?n:{default:n}}var h=b(u),g=function(n,e){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])})(n,e)};
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function v(n,e,t,r){return new(t||(t=Promise))((function(o,a){function i(n){try{c(r.next(n))}catch(n){a(n)}}function s(n){try{c(r.throw(n))}catch(n){a(n)}}function c(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(i,s)}c((r=r.apply(n,e||[])).next())}))}function y(n,e){var t,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(n,i)}catch(n){a=[6,n],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}Object.create;function S(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,o,a=t.call(n),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(t=a.return)&&t.call(a)}finally{if(o)throw o.error}}return i}function w(){for(var n=[],e=0;e<arguments.length;e++)n=n.concat(S(arguments[e]));return n}Object.create;localStorage;var A=function(n){function t(){var e=n.apply(this,w(arguments))||this;return e.isInternalAuth=!0,e}return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=n}g(n,e),n.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}(t,n),t.prototype.login=function(){this.injector.get(i.Router).navigateByUrl("/account/login")},t.prototype.checkIfInternalAuth=function(){return!0},t.prototype.logout=function(){var n=this,t=this.injector.get(e.RestService),r=this.injector.get(e.ConfigStateService),o=this.injector.get(e.AbpApplicationConfigurationService),a=r.getDeep("environment.oAuthConfig.issuer");return t.request({method:"GET",url:"/api/account/logout"},null,a).pipe(l.tap((function(){return n.oAuthService.logOut()})),l.switchMap((function(){return o.get().pipe(l.tap((function(n){return r.setState(n)})))})))},t.prototype.destroy=function(){},t}(e.AuthFlowStrategy),C=function(){function n(n,t,r,o,a,i,s,c){var p=this;this.injector=n,this.environment=t,this.oAuthService=r,this.abpApplicationConfigurationService=o,this.router=a,this.sessionStateService=i,this.configStateService=s,this.options=c,this.setStrategy=function(){var n=p.environment.getEnvironment().oAuthConfig.responseType||"password";p.flow!==n&&(p.strategy&&p.strategy.destroy(),p.flow=n,p.strategy="password"===n?new A(p.injector):e.AUTH_FLOW_STRATEGY.Code(p.injector))},this.setStrategy(),this.listenToSetEnvironment()}return n.prototype.initLogin=function(){this.strategy.login()},Object.defineProperty(n.prototype,"isInternalAuth",{get:function(){return this.strategy.isInternalAuth},enumerable:!1,configurable:!0}),n.prototype.listenToSetEnvironment=function(){this.environment.createOnUpdateStream((function(n){return n.oAuthConfig})).subscribe(this.setStrategy)},n.prototype.init=function(){return v(this,void 0,void 0,(function(){return y(this,(function(n){switch(n.label){case 0:return[4,this.strategy.init()];case 1:return[2,n.sent()]}}))}))},n.prototype.logout=function(){return this.strategy.logout()},n.prototype.login=function(n,e){var t=this,r=this.sessionStateService.getTenant();return p.from(this.oAuthService.fetchTokenUsingPasswordFlow(n,e,new s.HttpHeaders(Object.assign({},r&&r.id&&{__tenant:r.id})))).pipe(l.switchMap((function(){return t.abpApplicationConfigurationService.get().pipe(l.tap((function(n){return t.configStateService.setState(n)})))})),l.tap((function(){var n=h.default((function(){return window.history.state.redirectUrl}))||(t.options||{}).redirectUrl||"/";t.router.navigateByUrl(n)})),l.take(1))},n}();C.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new C(r.ɵɵinject(r.INJECTOR),r.ɵɵinject(e.EnvironmentService),r.ɵɵinject(c.OAuthService),r.ɵɵinject(e.AbpApplicationConfigurationService),r.ɵɵinject(i.Router),r.ɵɵinject(e.SessionStateService),r.ɵɵinject(e.ConfigStateService),r.ɵɵinject("ACCOUNT_OPTIONS",8))},token:C,providedIn:"root"}),C.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],C.ctorParameters=function(){return[{type:r.Injector},{type:e.EnvironmentService},{type:c.OAuthService},{type:e.AbpApplicationConfigurationService},{type:i.Router},{type:e.SessionStateService},{type:e.ConfigStateService},{type:void 0,decorators:[{type:r.Optional},{type:r.Inject,args:["ACCOUNT_OPTIONS"]}]}]};var T=d.Validators.maxLength,P=(d.Validators.minLength,d.Validators.required),L=function(){function n(n,e,t,r,o,a){this.fb=n,this.oauthService=e,this.store=t,this.toasterService=r,this.authService=o,this.configStateService=a,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return n.prototype.ngOnInit=function(){this.isSelfRegistrationEnabled="false"!==(this.configStateService.getSetting("Abp.Account.IsSelfRegistrationEnabled")||"").toLowerCase(),this.form=this.fb.group({username:["",[P,T(255)]],password:["",[P,T(128)]],remember:[!1]})},n.prototype.onSubmit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.authService.login(this.form.get("username").value,this.form.get("password").value).pipe(l.catchError((function(e){return n.toasterService.error(h.default((function(){return e.error.error_description}))||h.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),p.throwError(e)})),l.finalize((function(){return n.inProgress=!1}))).subscribe((function(){})))},n}();L.decorators=[{type:r.Component,args:[{selector:"abp-login",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: authWrapperKey,\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef },\r\n      cancelContentRef: { value: cancelContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n  [cancelContentRef]="cancelContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\r\n  <strong *ngIf="isSelfRegistrationEnabled">\r\n    {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/register">{{\r\n      \'AbpAccount::Register\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n    <div class="form-group">\r\n      <label for="login-input-user-name-or-email-address">{{\r\n        \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n      }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="text"\r\n        id="login-input-user-name-or-email-address"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n        autofocus\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="password"\r\n        id="login-input-password"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <div class="form-check" validationTarget validationStyle>\r\n      <label class="form-check-label" for="login-input-remember-me">\r\n        <input\r\n          class="form-check-input"\r\n          type="checkbox"\r\n          id="login-input-remember-me"\r\n          formControlName="remember"\r\n        />\r\n        {{ \'AbpAccount::RememberMe\' | abpLocalization }}\r\n      </label>\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Login\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n<ng-template #cancelContentRef>\r\n  <div class="card-footer text-center border-0">\r\n    <a routerLink="/">\r\n      <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\r\n        {{ \'AbpAccount::Cancel\' | abpLocalization }}\r\n      </button>\r\n    </a>\r\n  </div>\r\n</ng-template>\r\n'}]}],L.ctorParameters=function(){return[{type:d.FormBuilder},{type:c.OAuthService},{type:m.Store},{type:t.ToasterService},{type:C},{type:e.ConfigStateService}]};var I=function(){function n(n){this.store=n,this.selectedTab=0,this.changePasswordKey="Account.ChangePasswordComponent",this.personalSettingsKey="Account.PersonalSettingsComponent"}return n.prototype.ngOnInit=function(){var n=this;this.store.dispatch(new e.GetProfile).subscribe((function(){n.isProfileLoaded=!0,n.store.selectSnapshot(e.ProfileState.getProfile).isExternal&&(n.hideChangePasswordTab=!0,n.selectedTab=1)}))},n}();I.decorators=[{type:r.Component,args:[{selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\r\n\r\n<div class="card border-0 shadow-sm min-h-400" [abpLoading]="!isProfileLoaded">\r\n  <div class="card-body">\r\n    <div class="row">\r\n      <div class="col-12 col-md-3">\r\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\r\n          <li\r\n            *ngIf="!hideChangePasswordTab && isProfileLoaded"\r\n            class="nav-item"\r\n            (click)="selectedTab = 0"\r\n          >\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 0 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpUi::ChangePassword\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n          <li class="nav-item mb-2" (click)="selectedTab = 1">\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 1 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpAccount::PersonalSettings\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div *ngIf="isProfileLoaded" class="col-12 col-md-9">\r\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form\r\n              *abpReplaceableTemplate="{ componentKey: changePasswordKey }"\r\n            ></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form\r\n              *abpReplaceableTemplate="{ componentKey: personalSettingsKey }"\r\n            ></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',animations:[f.trigger("fadeIn",[f.transition(":enter",f.useAnimation(t.fadeIn))])],styles:["\n      .min-h-400 {\n        min-height: 400px;\n      }\n    "]}]}],I.ctorParameters=function(){return[{type:m.Store}]};var N=function(){function n(n){this.rest=n,this.apiName="AbpAccount"}return n.prototype.findTenant=function(n){var e={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+n};return this.rest.request(e,{apiName:this.apiName})},n.prototype.register=function(n){var e={method:"POST",url:"/api/account/register",body:n};return this.rest.request(e,{skipHandleError:!0,apiName:this.apiName})},n}();N.ɵprov=r.ɵɵdefineInjectable({factory:function(){return new N(r.ɵɵinject(e.RestService))},token:N,providedIn:"root"}),N.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],N.ctorParameters=function(){return[{type:e.RestService}]};var x=d.Validators.maxLength,j=d.Validators.required,O=d.Validators.email,R=function(){function n(n,e,t,r,o,a,i){this.fb=n,this.accountService=e,this.oauthService=t,this.store=r,this.toasterService=o,this.authService=a,this.injector=i,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return n.prototype.ngOnInit=function(){this.form=this.fb.group({username:["",[j,x(255)]],password:["",w([j],t.getPasswordValidators(this.injector))],email:["",[j,O]]})},n.prototype.onSubmit=function(){var n=this;if(!this.form.invalid){this.inProgress=!0;var e={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(e).pipe(l.switchMap((function(){return n.authService.login(e.userName,e.password)})),l.catchError((function(e){return n.toasterService.error(h.default((function(){return e.error.error_description}))||h.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),p.throwError(e)})),l.finalize((function(){return n.inProgress=!1}))).subscribe()}},n}();R.decorators=[{type:r.Component,args:[{selector:"abp-register",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: authWrapperKey,\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\r\n  <strong>\r\n    {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/login">{{\r\n      \'AbpAccount::Login\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form\r\n    *ngIf="isSelfRegistrationEnabled"\r\n    [formGroup]="form"\r\n    (ngSubmit)="onSubmit()"\r\n    validateOnSubmit\r\n    class="mt-4"\r\n  >\r\n    <div class="form-group">\r\n      <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        autofocus\r\n        type="text"\r\n        id="input-user-name"\r\n        class="form-control"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input type="email" id="input-email-address" class="form-control" formControlName="email" />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        type="password"\r\n        id="input-password"\r\n        class="form-control"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Register\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n'}]}],R.ctorParameters=function(){return[{type:d.FormBuilder},{type:N},{type:c.OAuthService},{type:m.Store},{type:t.ToasterService},{type:C},{type:r.Injector}]};var z=function(){function n(n){this.authService=n}return n.prototype.canActivate=function(){return!!this.authService.isInternalAuth||(this.authService.initLogin(),!1)},n}();z.decorators=[{type:r.Injectable}],z.ctorParameters=function(){return[{type:C}]};var E={replaceableComponent:{key:"Account.LoginComponent",defaultComponent:L}},M={replaceableComponent:{key:"Account.RegisterComponent",defaultComponent:R}},k={replaceableComponent:{key:"Account.ManageProfileComponent",defaultComponent:I}},U=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:e.DynamicLayoutComponent,children:[{path:"login",component:e.ReplaceableRouteContainerComponent,canActivate:[z],data:E},{path:"register",component:e.ReplaceableRouteContainerComponent,canActivate:[z],data:M},{path:"manage-profile",component:e.ReplaceableRouteContainerComponent,canActivate:[e.AuthGuard],data:k}]}],q=function(){};q.decorators=[{type:r.NgModule,args:[{imports:[i.RouterModule.forChild(U)],exports:[i.RouterModule]}]}];var _=function(){function n(n,e,t,r){this.multiTenancy=n,this.store=e,this.subscription=t,this.configStateService=r,this.enableLocalLogin=!0,this.tenantBoxKey="Account.TenantBoxComponent",this.isMultiTenancyEnabled$=this.configStateService.getDeep$("multiTenancy.isEnabled")}return n.prototype.ngOnInit=function(){var n=this;this.subscription.addOne(this.configStateService.getSetting$("Abp.Account.EnableLocalLogin"),(function(e){e&&(n.enableLocalLogin="false"!==e.toLowerCase())}))},n}();_.decorators=[{type:r.Component,args:[{selector:"abp-auth-wrapper",template:'<div class="row">\r\n  <div class="mx-auto col col-md-5">\r\n    <ng-container *ngIf="(isMultiTenancyEnabled$ | async) && multiTenancy.isTenantBoxVisible">\r\n      <abp-tenant-box *abpReplaceableTemplate="{ componentKey: tenantBoxKey }"></abp-tenant-box>\r\n    </ng-container>\r\n\r\n    <div class="abp-account-container">\r\n      <div\r\n        *ngIf="enableLocalLogin; else disableLocalLoginTemplate"\r\n        class="card mt-3 shadow-sm rounded"\r\n      >\r\n        <div class="card-body p-5">\r\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\r\n        </div>\r\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #disableLocalLoginTemplate>\r\n  <div class="alert alert-warning">\r\n    <strong>{{ \'AbpAccount::InvalidLoginRequest\' | abpLocalization }}</strong>\r\n    {{ \'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient\' | abpLocalization }}\r\n  </div>\r\n</ng-template>\r\n',exportAs:"abpAuthWrapper",providers:[e.SubscriptionService]}]}],_.ctorParameters=function(){return[{type:e.MultiTenancyService},{type:m.Store},{type:e.SubscriptionService},{type:e.ConfigStateService}]},_.propDecorators={mainContentRef:[{type:r.Input}],cancelContentRef:[{type:r.Input}]};var F=d.Validators.required,V=["newPassword","repeatNewPassword"],D=function(){function n(n,e,t,r){this.fb=n,this.store=e,this.toasterService=t,this.injector=r,this.mapErrorsFn=function(n,e,t){return V.indexOf(String(t.name))<0?n:n.concat(e.filter((function(n){return"passwordMismatch"===n.key})))}}return n.prototype.ngOnInit=function(){this.hideCurrentPassword=!this.store.selectSnapshot(e.ProfileState.getProfile).hasPassword;var n=t.getPasswordValidators(this.injector);this.form=this.fb.group({password:["",F],newPassword:["",{validators:w([F],n)}],repeatNewPassword:["",{validators:w([F],n)}]},{validators:[a.comparePasswords(V)]}),this.hideCurrentPassword&&this.form.removeControl("password")},n.prototype.onSubmit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.ChangePassword(Object.assign(Object.assign({},!this.hideCurrentPassword&&{currentPassword:this.form.get("password").value}),{newPassword:this.form.get("newPassword").value}))).pipe(l.finalize((function(){return n.inProgress=!1}))).subscribe({next:function(){n.form.reset(),n.toasterService.success("AbpAccount::PasswordChangedMessage","",{life:5e3}),n.hideCurrentPassword&&(n.hideCurrentPassword=!1,n.form.addControl("password",new d.FormControl("",[F])))},error:function(e){n.toasterService.error(h.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"))}}))},n}();D.decorators=[{type:r.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\r\n  <div *ngIf="!hideCurrentPassword" class="form-group">\r\n    <label for="current-password">{{\r\n      \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="current-password"\r\n      class="form-control"\r\n      formControlName="password"\r\n      autofocus\r\n      autocomplete="current-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="new-password"\r\n      class="form-control"\r\n      formControlName="newPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="confirm-new-password">{{\r\n      \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="confirm-new-password"\r\n      class="form-control"\r\n      formControlName="repeatNewPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    buttonType="submit"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpChangePasswordForm"}]}],D.ctorParameters=function(){return[{type:d.FormBuilder},{type:m.Store},{type:t.ToasterService},{type:r.Injector}]};var B=d.Validators.maxLength,K=d.Validators.required,G=d.Validators.email,$=function(){function n(n,e,t){this.fb=n,this.store=e,this.toasterService=t}return n.prototype.ngOnInit=function(){this.buildForm()},n.prototype.buildForm=function(){var n=this.store.selectSnapshot(e.ProfileState.getProfile);this.form=this.fb.group({userName:[n.userName,[K,B(256)]],email:[n.email,[K,G,B(256)]],name:[n.name||"",[B(64)]],surname:[n.surname||"",[B(64)]],phoneNumber:[n.phoneNumber||"",[B(16)]]})},n.prototype.submit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.UpdateProfile(this.form.value)).pipe(l.finalize((function(){return n.inProgress=!1}))).subscribe((function(){n.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},n}();$.decorators=[{type:r.Component,args:[{selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <div class="form-group">\r\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="text"\r\n      id="username"\r\n      class="form-control"\r\n      formControlName="userName"\r\n      autofocus\r\n      (keydown.space)="$event.preventDefault()"\r\n    />\r\n  </div>\r\n  <div class="row">\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\r\n        ><input type="text" id="name" class="form-control" formControlName="name" />\r\n      </div>\r\n    </div>\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\r\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="text" id="email-address" class="form-control" formControlName="email" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\r\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\r\n  </div>\r\n  <abp-button\r\n    buttonType="submit"\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n  >\r\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpPersonalSettingsForm"}]}],$.ctorParameters=function(){return[{type:d.FormBuilder},{type:m.Store},{type:t.ToasterService}]};var W=function(){function n(n,e,t,r,o,a){this.toasterService=n,this.accountService=e,this.sessionStateService=t,this.subscriptionService=r,this.abpApplicationConfigurationService=o,this.configStateService=a,this.currentTenant$=this.sessionStateService.getTenant$()}return n.prototype.onSwitch=function(){var n=this.sessionStateService.getTenant();this.name=(n||{}).name,this.isModalVisible=!0},n.prototype.save=function(){var n=this;if(!this.name)return this.setTenant(null),void(this.isModalVisible=!1);this.modalBusy=!0,this.accountService.findTenant(this.name).pipe(l.finalize((function(){return n.modalBusy=!1}))).subscribe((function(e){var t=e.success,r=e.tenantId,o=e.name;t?(n.setTenant({id:r,name:o}),n.isModalVisible=!1):n.showError()}))},n.prototype.setTenant=function(n){var e=this;this.sessionStateService.setTenant(n),this.subscriptionService.addOne(this.sessionStateService.getTenant$(),(function(n){e.abpApplicationConfigurationService.get().pipe(l.tap((function(n){return e.configStateService.setState(n)}))).subscribe()}))},n.prototype.showError=function(){this.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[this.name]})},n}();W.decorators=[{type:r.Component,args:[{selector:"abp-tenant-box",template:'<ng-container *ngIf="(currentTenant$ | async) || {} as currentTenant">\r\n  <div class="card shadow-sm rounded mb-3">\r\n    <div class="card-body px-5">\r\n      <div class="row">\r\n        <div class="col">\r\n          <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n            \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class="m-0 d-inline-block">\r\n            <i>{{ currentTenant.name || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class="col-auto">\r\n          <a\r\n            id="AbpTenantSwitchLink"\r\n            href="javascript:void(0);"\r\n            class="btn btn-sm mt-3 btn-outline-primary"\r\n            (click)="onSwitch()"\r\n            >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)="save()">\r\n        <div class="mt-2">\r\n          <div class="form-group">\r\n            <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n            <input\r\n              [(ngModel)]="name"\r\n              type="text"\r\n              id="name"\r\n              name="tenant"\r\n              class="form-control"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button #abpClose type="button" class="btn btn-secondary">\r\n        {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type="abp-button"\r\n        iconClass="fa fa-check"\r\n        (click)="save()"\r\n        [disabled]="currentTenant?.name === name"\r\n      >\r\n        <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n</ng-container>\r\n'}]}],W.ctorParameters=function(){return[{type:t.ToasterService},{type:N},{type:e.SessionStateService},{type:e.SubscriptionService},{type:e.AbpApplicationConfigurationService},{type:e.ConfigStateService}]};var H=new r.InjectionToken("ACCOUNT_OPTIONS");function Y(n){return Object.assign({redirectUrl:"/"},n)}var J=function(){function n(n){this.environmentService=n}return n.prototype.canActivate=function(n,e){var t=this.environmentService.getEnvironment();return"code"!==t.oAuthConfig.responseType||(window.location.href=t.oAuthConfig.issuer+"/Account/Manage?returnUrl="+window.location.href,!1)},n}();J.decorators=[{type:r.Injectable}],J.ctorParameters=function(){return[{type:e.EnvironmentService}]};var Q=function(){function n(){}return n.forChild=function(e){return{ngModule:n,providers:[z,J,{provide:H,useValue:e},{provide:"ACCOUNT_OPTIONS",useFactory:Y,deps:[H]}]}},n.forLazy=function(t){return new e.LazyModuleFactory(n.forChild(t))},n}();Q.decorators=[{type:r.NgModule,args:[{declarations:[_,L,R,W,D,I,$],imports:[e.CoreModule,q,t.ThemeSharedModule,o.NgbDropdownModule,a.NgxValidateCoreModule],exports:[]}]}],n.ACCOUNT_OPTIONS=H,n.AccountModule=Q,n.AccountService=N,n.AuthService=C,n.AuthenticationFlowGuard=z,n.ChangePasswordComponent=D,n.LoginComponent=L,n.ManageProfileComponent=I,n.ManageProfileGuard=J,n.PersonalSettingsComponent=$,n.RegisterComponent=R,n.TenantBoxComponent=W,n.ɵa=_,n.ɵb=L,n.ɵc=C,n.ɵd=R,n.ɵe=N,n.ɵf=W,n.ɵg=D,n.ɵh=I,n.ɵi=$,n.ɵj=q,n.ɵk=z,n.ɵm=J,n.ɵn=H,n.ɵo=Y,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=fs-tw-account.umd.min.js.map