{"version":3,"file":"auth.service.js","sourceRoot":"../../../../libs/account/src/","sources":["lib/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap, take, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  EnvironmentService, ConfigStateService,\r\n  AbpApplicationConfigurationService, SessionStateService, AuthFlowStrategy,\r\n  AUTH_FLOW_STRATEGY\r\n} from '@abp/ng.core';\r\nimport { AuthPasswordFlowStrategy } from '../strategies/auth-flow.strategy'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private flow: string;\r\n  private strategy: AuthFlowStrategy;\r\n\r\n  constructor(\r\n    private injector: Injector,\r\n    private environment: EnvironmentService,\r\n    private oAuthService: OAuthService,\r\n    private abpApplicationConfigurationService: AbpApplicationConfigurationService,\r\n    private router: Router,\r\n    private sessionStateService: SessionStateService,\r\n    private configStateService: ConfigStateService,\r\n    @Optional() @Inject('ACCOUNT_OPTIONS') private options: any,\r\n  ) {\r\n    this.setStrategy();\r\n    this.listenToSetEnvironment();\r\n  }\r\n\r\n\r\n  initLogin() {\r\n    this.strategy.login();\r\n  }\r\n\r\n  private setStrategy = () => {\r\n    const flow = this.environment.getEnvironment().oAuthConfig.responseType || 'password';\r\n    if (this.flow === flow) return;\r\n    if (this.strategy) this.strategy.destroy();\r\n    this.flow = flow;\r\n    if (flow === 'password') {\r\n      this.strategy = new AuthPasswordFlowStrategy(this.injector);\r\n    }\r\n    else {\r\n      this.strategy = AUTH_FLOW_STRATEGY.Code(this.injector);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  get isInternalAuth() {\r\n    return this.strategy.isInternalAuth;\r\n  }\r\n\r\n  private listenToSetEnvironment() {\r\n    this.environment.createOnUpdateStream(state => state.oAuthConfig).subscribe(this.setStrategy);\r\n  }\r\n\r\n  async init() {\r\n    return await this.strategy.init();\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.strategy.logout()\r\n  }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    const tenant = this.sessionStateService.getTenant();\r\n\r\n    return from(\r\n      this.oAuthService.fetchTokenUsingPasswordFlow(\r\n        username,\r\n        password,\r\n        new HttpHeaders({ ...(tenant && tenant.id && { __tenant: tenant.id }) }),\r\n      ),\r\n    ).pipe(\r\n      switchMap(() => {\r\n        return this.abpApplicationConfigurationService.get()\r\n          .pipe(tap(x => this.configStateService.setState(x)))\r\n      }),\r\n      tap(() => {\r\n        const redirectUrl =\r\n          snq(() => window.history.state.redirectUrl) || (this.options || {}).redirectUrl || '/';\r\n        this.router.navigateByUrl(redirectUrl)\r\n      }),\r\n      take(1),\r\n    );\r\n\r\n  }\r\n\r\n}\r\n"]}