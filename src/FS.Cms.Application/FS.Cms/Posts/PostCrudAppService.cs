//------------------------------------------------------------------------------
// This code was generated by YinChang.
// 1.102.0.0
//
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using FS.Abp.CodingManagement.Coding;
using FS.Abp.Files;
using FS.Cms.Posts.Dtos;
using HtmlAgilityPack;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Configuration;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Domain.Entities;

namespace FS.Cms.Posts
{

    public partial class PostCrudAppService : IPostCrudAppService
    {
        private IFileManager fileManager;
        protected IFileManager FileManager => this.LazyGetRequiredService(ref fileManager);

        private IConfiguration configuration;
        protected IConfiguration Configuration => this.LazyGetRequiredService(ref configuration);

        private IPostsManager postsManager;
        protected IPostsManager PostsManager => this.LazyGetRequiredService(ref postsManager);

        private ICodesTreeRepository codesTreeRepository;
        protected ICodesTreeRepository CodesTreeRepository => this.LazyGetRequiredService(ref codesTreeRepository);

        public override async Task<PagedResultDto<PostWithDetailsDto>> GetListAsync(PostGetListDto input)
        {
            var uer = CurrentUser.Id;
            var permission = await AuthorizationService.AuthorizeAsync("FS.Cms.Menu.前台內容管理.最新消息管理");
            var url = this.Configuration["App:SelfUrl"];

            var query = this.PostsManager.CheckPublished_AtForPermission(input.BlogCodeId, permission.Succeeded);


            var listResult = await this.SearchedAndPagedAndSortedOperation.ListAsync(query, input).ConfigureAwait(false);

            var result = ObjectMapper.Map<List<Posts.Post>, List<PostWithDetailsDto>>(listResult.Entities);
            foreach (var item in result)
            {
                var blogCode = this.CodesTreeRepository.Where(x => x.Id == item.BlogCodeId).FirstOrDefault();
                if (blogCode.ParentId != null)
                {
                    item.BlogDisplayName = blogCode.DisplayName;
                }
                else
                {
                    item.BlogDisplayName = "不分類";
                }

                if (item.DisplayMode == DisplayMode.內文)
                {
                    item.Content = item.Content.Replace("<img src='api", $"<img src='{url}/api");
                    item.Content = item.Content.Replace("<img src=\"api", $"<img src=\"{url}/api");
                }
            }




            return new PagedResultDto<PostWithDetailsDto>()
            {
                TotalCount = listResult.TotalCount,
                Items = result
            };
        }

        public override async Task<PostWithDetailsDto> GetAsync(PostPrimaryKeyDto key)
        {

            var url = this.Configuration["App:SelfUrl"];
            var post = this.Repository.WithDetails().Where(x => x.Id == key.Id).First();
            var output = ObjectMapper.Map<Post, Posts.Dtos.PostWithDetailsDto>(post);
            if (output.DisplayMode == DisplayMode.內文)
            {
                output.Content = output.Content.Replace("<img src='api", $"<img src='{url}/api");
                output.Content = output.Content.Replace("<img src=\"api", $"<img src=\"{url}/api");
            }
            return output;
        }

        public override async Task<Posts.Dtos.PostWithDetailsDto> CreateAsync(PostCreateDto input)
        {
            Guid postId = GuidGenerator.Create();
            if (input.DisplayMode == DisplayMode.內文)
            {
                input.Content = await this.contentBase64ToUrl(input.Content, postId);
            }

            var entityInput = ObjectMapper.Map<PostCreateDto, Post>(input);

            EntityHelper.TrySetId(entityInput, () => postId, true);
            entityInput.TenantId = CurrentTenant.Id;
            await this.Repository.InsertAsync(entityInput).ConfigureAwait(false);
            return ObjectMapper.Map<Post, Posts.Dtos.PostWithDetailsDto>(entityInput);
        }

        public override async Task<Posts.Dtos.PostWithDetailsDto> UpdateAsync(PostPrimaryKeyDto key, PostUpdateDto input)
        {
            var post = this.Repository.Where(x => x.Id == key.Id).First();
            ObjectMapper.Map(input, post);
            List<string> deleteTargetList = new List<string>();

            if (post.DisplayMode == DisplayMode.內文)
            {
                post.Content = await this.contentUrlToRelativeUrl(post.Content);
                post.Content = await this.contentBase64ToUrl(post.Content, post.Id);
            }
            post.TenantId = CurrentTenant.Id;
            await this.Repository.UpdateAsync(post).ConfigureAwait(false);
            return ObjectMapper.Map<Post, Posts.Dtos.PostWithDetailsDto>(post);
        }

        private async Task<string> contentUrlToRelativeUrl(string content = "")
        {
            if (content.IsNullOrEmpty()) return "";
            var targetUrl = "api/theme-core/file";
            var htmlDoc = new HtmlDocument();
            htmlDoc.LoadHtml(content);
            var source = htmlDoc.DocumentNode.SelectNodes("//img");
            if (source.IsNullOrEmpty()) return content;
            var htmlNodes = source.ToList();
            foreach (var htmlNode in htmlNodes)
            {
                var imgUrl = htmlNode.Attributes["src"].Value;
                if (!imgUrl.StartsWith(targetUrl) && !imgUrl.StartsWith("data:image"))
                {
                    var firstIndex = imgUrl.IndexOf(targetUrl);
                    var newUrl = imgUrl.Substring(firstIndex);
                    content = content.Replace(imgUrl, newUrl);
                }
            }
            return content;
        }
        private async Task<string> contentBase64ToUrl(string content, Guid postId)
        {
            string firstStr = "<img src=\"data";
            string lastStr = "\">";
            while (content.Contains(firstStr))
            {
                int firstIndex = content.IndexOf(firstStr);
                string lastContent = content.Substring(firstIndex);
                int lastIndex = lastContent.IndexOf(lastStr) + 2;
                string replaceData = content.Substring(firstIndex, lastIndex);
                var fileUrl = $"cms\\posts\\{postId}\\{GuidGenerator.Create()}{checkFileType(replaceData)}";
                await this.FileManager.SaveBytesAsync(fileUrl, replaceData.Replace("\">", ""));
                var fileUrlOutput = fileUrl.Replace("\\", "%5C");
                content = content.Replace(replaceData, "<img src='api/theme-core/file/" + $"{fileUrlOutput}" + "'>");
            }
            return content;
        }
        private string checkFileType(string input)
        {
            if (input.Contains("image/png")) return ".png";
            else if (input.Contains("image/gif")) return ".gif";
            else if (input.Contains("image/jpeg")) return ".jpg";
            else if (input.Contains("image/bmp")) return ".bmp";
            else return ".jpg";
        }

    }
}
