{"version":3,"file":"auth-flow.strategy.js","sourceRoot":"../../../../libs/account/src/","sources":["lib/strategies/auth-flow.strategy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kCAAkC,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AACrH,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAChD,MAAM,CAAC,MAAM,YAAY,GAAG,YAAY,CAAC;AAEzC,MAAM,OAAO,wBAAyB,SAAQ,gBAAgB;IAA9D;;QACa,mBAAc,GAAG,IAAI,CAAC;IAoCnC,CAAC;IAlCG,KAAK;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAC3C,CAAC;IAED,mBAAmB;QACf,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM;QACF,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC5C,MAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACjE,MAAM,kCAAkC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QACjG,MAAM,MAAM,GAAW,kBAAkB,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;QAEpF,OAAO,IAAI;aACN,OAAO,CACJ;YACI,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,qBAAqB;SAC7B,EACD,IAAI,EACJ,MAAM,CACT;aACA,IAAI,CACD,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EACrC,SAAS,CAAC,GAAG,EAAE;YACX,OAAO,kCAAkC,CAAC,GAAG,EAAE;iBAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACvD,CAAC,CAAC,CACL,CAAC;IACV,CAAC;IAED,OAAO,KAAK,CAAC;CAChB","sourcesContent":["import { AbpApplicationConfigurationService, AuthFlowStrategy, ConfigStateService, RestService } from '@abp/ng.core';\r\nimport { Router } from '@angular/router';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nexport const oAuthStorage = localStorage;\r\n\r\nexport class AuthPasswordFlowStrategy extends AuthFlowStrategy {\r\n    readonly isInternalAuth = true;\r\n\r\n    login() {\r\n        const router = this.injector.get(Router);\r\n        router.navigateByUrl('/account/login');\r\n    }\r\n\r\n    checkIfInternalAuth() {\r\n        return true;\r\n    }\r\n\r\n    logout() {\r\n        const rest = this.injector.get(RestService);\r\n        const configStateService = this.injector.get(ConfigStateService);\r\n        const abpApplicationConfigurationService = this.injector.get(AbpApplicationConfigurationService);\r\n        const issuer: string = configStateService.getDeep('environment.oAuthConfig.issuer');\r\n\r\n        return rest\r\n            .request(\r\n                {\r\n                    method: 'GET',\r\n                    url: '/api/account/logout',\r\n                },\r\n                null,\r\n                issuer,\r\n            )\r\n            .pipe(\r\n                tap(() => this.oAuthService.logOut()),\r\n                switchMap(() => {\r\n                    return abpApplicationConfigurationService.get()\r\n                        .pipe(tap(x => configStateService.setState(x)))\r\n                }),\r\n            );\r\n    }\r\n\r\n    destroy() { }\r\n}"]}