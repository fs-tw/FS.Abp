{"version":3,"file":"i18n.component.js","sourceRoot":"../../../../../libs/theme-alain/layout/src/","sources":["lib/basic/widgets/i18n.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAA4B,MAAM,cAAc,CAAC;AACjG,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAE1E,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAgB,YAAY,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,GAAG,MAAM,KAAK,CAAC;AAQtB,MAAM,OAAO,mBAAmB;IAmC9B,YACU,WAA+B,EAC/B,YAAiC;QADjC,gBAAW,GAAX,WAAW,CAAoB;QAC/B,iBAAY,GAAZ,YAAY,CAAqB;QAnClB,iBAAY,GAAG,IAAI,CAAC;QAE7C,eAAU,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC;IAkC7D,CAAC;IAhCL,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACzB,GAAG,CAAC,SAAS,CAAC,EAAE;YACd,MAAM,IAAI,GAA+C,GAAG,CAC1D,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,mBAAmB,CAAC,EACnF,EAAgD,CACjD,CAAC;YACF,OAAO;gBACL,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,EAAE;gBACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACzB,GAAG,CACD,SAAS,CAAC,EAAE,CACV,GAAG,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,EACpF,EAAE,CACH,CACF,CAAC;IACJ,CAAC;IAED,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IAOD,MAAM,CAAC,WAAmB;QACxB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAC;;;YA/CF,SAAS,SAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,g3BAAkC;gBAClC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;YAZQ,kBAAkB;YAAE,mBAAmB;;;2BAe7C,KAAK;;AAAmB;IAAf,YAAY,EAAE;;yDAAqB","sourcesContent":["import { ConfigStateService, SessionStateService, ApplicationConfiguration } from '@abp/ng.core';\r\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { BooleanInput, InputBoolean } from '@delon/util';\r\nimport snq from 'snq';\r\n\r\n\r\n@Component({\r\n  selector: 'header-i18n',\r\n  templateUrl: 'i18n.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HeaderI18nComponent {\r\n  static ngAcceptInputType_showLangText: BooleanInput;\r\n  @Input() @InputBoolean() showLangText = true;\r\n\r\n  languages$ = this.configState.getDeep$('localization.languages');\r\n\r\n  get defaultLanguage$(): Observable<{ displayName: string; flagIcon: string }> {\r\n    return this.languages$.pipe(\r\n      map(languages => {\r\n        const lang: Partial<ApplicationConfiguration.Language> = snq(\r\n          () => languages.find(language => language.cultureName === this.selectedLangCulture),\r\n          {} as Partial<ApplicationConfiguration.Language>,\r\n        );\r\n        return {\r\n          displayName: lang.displayName || '',\r\n          flagIcon: lang.flagIcon,\r\n        };\r\n      }),\r\n    );\r\n  }\r\n\r\n  get dropdownLanguages$(): Observable<ApplicationConfiguration.Language[]> {\r\n    return this.languages$.pipe(\r\n      map(\r\n        languages =>\r\n          snq(() => languages.filter(lang => lang.cultureName !== this.selectedLangCulture)),\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n\r\n  get selectedLangCulture(): string {\r\n    return this.sessionState.getLanguage();\r\n  }\r\n\r\n  constructor(\r\n    private configState: ConfigStateService,\r\n    private sessionState: SessionStateService\r\n  ) { }\r\n\r\n  change(cultureName: string): void {\r\n    this.sessionState.setLanguage(cultureName);\r\n  }\r\n}\r\n"]}