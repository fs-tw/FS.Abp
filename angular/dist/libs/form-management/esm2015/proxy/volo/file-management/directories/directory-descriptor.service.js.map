{"version":3,"file":"directory-descriptor.service.js","sourceRoot":"","sources":["../../../../../../../../libs/form-management/proxy/src/volo/file-management/directories/directory-descriptor.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;AAK3C,MAAM,OAAO,0BAA0B;IAyDrC,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAxD5C,YAAO,GAAG,gBAAgB,CAAC;QAE3B,kBAAa,GAAG,CAAC,KAA2B,EAAE,EAAE,CAC9C,IAAI,CAAC,WAAW,CAAC,OAAO,CAA8B;YACpD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,2CAA2C;YAChD,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,eAAU,GAAG,CAAC,EAAU,EAAE,EAAE,CAC1B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,QAAQ;YAChB,GAAG,EAAE,6CAA6C,EAAE,EAAE;SACvD,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,YAAO,GAAG,CAAC,EAAU,EAAE,EAAE,CACvB,IAAI,CAAC,WAAW,CAAC,OAAO,CAA8B;YACpD,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,6CAA6C,EAAE,EAAE;SACvD,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,sBAAiB,GAAG,CAAC,KAAmC,EAAE,EAAE,CAC1D,IAAI,CAAC,WAAW,CAAC,OAAO,CAA2C;YACjE,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,2CAA2C;YAChD,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE;SACvE,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,sBAAiB,GAAG,CAAC,QAAgB,EAAE,EAAE,CACvC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAiD;YACvE,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,2DAA2D;YAChE,MAAM,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE;SAC/B,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,gBAAW,GAAG,CAAC,KAAyB,EAAE,EAAE,CAC1C,IAAI,CAAC,WAAW,CAAC,OAAO,CAA8B;YACpD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,gDAAgD;YACrD,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,uBAAkB,GAAG,CAAC,EAAU,EAAE,KAA2B,EAAE,EAAE,CAC/D,IAAI,CAAC,WAAW,CAAC,OAAO,CAA8B;YACpD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,6CAA6C,EAAE,EAAE;YACtD,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAEkB,CAAC;;;;YA5DjD,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YANQ,WAAW","sourcesContent":["import type { CreateDirectoryInput, DirectoryContentDto, DirectoryContentRequestInput, DirectoryDescriptorDto, DirectoryDescriptorInfoDto, MoveDirectoryInput, RenameDirectoryInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoryDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentByInput = (input: DirectoryContentRequestInput) =>\r\n    this.restService.request<any, PagedResultDto<DirectoryContentDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      params: { filter: input.filter, sorting: input.sorting, id: input.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByParentId = (parentId: string) =>\r\n    this.restService.request<any, ListResultDto<DirectoryDescriptorInfoDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/sub-directories`,\r\n      params: { parentId: parentId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}