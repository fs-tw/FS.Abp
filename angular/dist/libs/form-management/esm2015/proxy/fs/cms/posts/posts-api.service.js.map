{"version":3,"file":"posts-api.service.js","sourceRoot":"","sources":["../../../../../../../../libs/form-management/proxy/src/fs/cms/posts/posts-api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GetPostByBlogIdInput, MetaData, PostCreateDto, PostGetListDto, PostPrimaryKeyDto, PostTagMapGetListDto, PostTagMapWithDetailsDto, PostUpdateDto, PostWithDetailsDto } from './dtos/models';\nimport { RestService } from '@abp/ng.core';\nimport type { PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostsApiService {\n  apiName = 'Default';\n\n  createByPostCreate = (PostCreate: PostCreateDto) =>\n    this.restService.request<any, PostWithDetailsDto>({\n      method: 'POST',\n      url: `/api/cms/posts/post`,\n      body: PostCreate,\n    },\n    { apiName: this.apiName });\n\n  deleteByPostPrimaryKey = (PostPrimaryKey: PostPrimaryKeyDto) =>\n    this.restService.request<any, void>({\n      method: 'DELETE',\n      url: `/api/cms/posts/post/id`,\n      params: { id: PostPrimaryKey.id },\n    },\n    { apiName: this.apiName });\n\n  getByPostPrimaryKey = (PostPrimaryKey: PostPrimaryKeyDto) =>\n    this.restService.request<any, PostWithDetailsDto>({\n      method: 'GET',\n      url: `/api/cms/posts/post/id`,\n      params: { id: PostPrimaryKey.id },\n    },\n    { apiName: this.apiName });\n\n  getListByPostGetList = (PostGetList: PostGetListDto) =>\n    this.restService.request<any, PagedResultDto<PostWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/cms/posts/post`,\n      params: { fields: PostGetList.fields, value: PostGetList.value, sorting: PostGetList.sorting, skipCount: PostGetList.skipCount, maxResultCount: PostGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByPostTagMapGetList = (PostTagMapGetList: PostTagMapGetListDto) =>\n    this.restService.request<any, PagedResultDto<PostTagMapWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/cms/posts/post-tag-map`,\n      params: { fields: PostTagMapGetList.fields, value: PostTagMapGetList.value, sorting: PostTagMapGetList.sorting, skipCount: PostTagMapGetList.skipCount, maxResultCount: PostTagMapGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getPostsByBlogIdByInput = (input: GetPostByBlogIdInput) =>\n    this.restService.request<any, PagedResultDto<PostWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/cms/posts/get-posts-by-blog-id`,\n      params: { blogId: input.blogId, keyword: input.keyword, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  options = () =>\n    this.restService.request<any, MetaData>({\n      method: 'OPTIONS',\n      url: `/api/cms/posts`,\n    },\n    { apiName: this.apiName });\n\n  updateByPostPrimaryKeyAndPostUpdate = (PostPrimaryKey: PostPrimaryKeyDto, PostUpdate: PostUpdateDto) =>\n    this.restService.request<any, PostWithDetailsDto>({\n      method: 'PUT',\n      url: `/api/cms/posts/post/id`,\n      params: { id: PostPrimaryKey.id },\n      body: PostUpdate,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n"]}