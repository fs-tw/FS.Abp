{"version":3,"sources":["../../../../libs/form-management/proxy/src/fs/form-management/documents/documents-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/forms/forms-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/records/records-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/samples/sample.service.ts","../../../../libs/form-management/proxy/src/volo/file-management/directories/directory-descriptor.service.ts","../../../../libs/form-management/proxy/src/volo/file-management/files/file-icon-type.enum.ts","../../../../libs/form-management/proxy/src/volo/file-management/files/file-descriptor.service.ts"],"names":["DocumentsApiService","restService","_this","this","apiName","getListByDocumentDefinitionGetList","DocumentDefinitionGetList","request","method","url","params","fields","value","sorting","skipCount","maxResultCount","getListByVersionGetList","VersionGetList","options","i0","ɵɵinject","i1","RestService","factory","ɵfac","providedIn","Injectable","FormsApiService","getListByFormalGetList","FormalGetList","getListByGroupGetList","GroupGetList","getListByItemGetList","ItemGetList","RecordsApiService","getListByRecordGetList","RecordGetList","getListByRecordItemGetList","RecordItemGetList","SampleService","get","getAuthorized","DirectoryDescriptorService","createByInput","input","body","deleteById","id","getById","getContentByInput","filter","getListByParentId","parentId","moveByInput","renameByIdAndInput","FileIconType","FileDescriptorService","downloadById","getContentById","getListByDirectoryId","directoryId","getPreInfoByInput","fileIconTypeOptions","mapEnumToOptions"],"mappings":"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","sourcesContent":["import type { DocumentDefinitionGetListDto, DocumentDefinitionWithDetailsDto, MetaData, VersionGetListDto, VersionWithDetailsDto } from './dtos/models';\nimport { RestService } from '@abp/ng.core';\nimport type { PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DocumentsApiService {\n  apiName = 'Default';\n\n  getListByDocumentDefinitionGetList = (DocumentDefinitionGetList: DocumentDefinitionGetListDto) =>\n    this.restService.request<any, PagedResultDto<DocumentDefinitionWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/documents/document-definition`,\n      params: { fields: DocumentDefinitionGetList.fields, value: DocumentDefinitionGetList.value, sorting: DocumentDefinitionGetList.sorting, skipCount: DocumentDefinitionGetList.skipCount, maxResultCount: DocumentDefinitionGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByVersionGetList = (VersionGetList: VersionGetListDto) =>\n    this.restService.request<any, PagedResultDto<VersionWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/documents/version`,\n      params: { fields: VersionGetList.fields, value: VersionGetList.value, sorting: VersionGetList.sorting, skipCount: VersionGetList.skipCount, maxResultCount: VersionGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  options = () =>\n    this.restService.request<any, MetaData>({\n      method: 'OPTIONS',\n      url: `/api/form-management/documents`,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import type { FormalGetListDto, FormalWithDetailsDto, GroupGetListDto, GroupWithDetailsDto, ItemGetListDto, ItemWithDetailsDto, MetaData } from './dtos/models';\nimport { RestService } from '@abp/ng.core';\nimport type { PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormsApiService {\n  apiName = 'Default';\n\n  getListByFormalGetList = (FormalGetList: FormalGetListDto) =>\n    this.restService.request<any, PagedResultDto<FormalWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/forms/formal`,\n      params: { fields: FormalGetList.fields, value: FormalGetList.value, sorting: FormalGetList.sorting, skipCount: FormalGetList.skipCount, maxResultCount: FormalGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByGroupGetList = (GroupGetList: GroupGetListDto) =>\n    this.restService.request<any, PagedResultDto<GroupWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/forms/group`,\n      params: { fields: GroupGetList.fields, value: GroupGetList.value, sorting: GroupGetList.sorting, skipCount: GroupGetList.skipCount, maxResultCount: GroupGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByItemGetList = (ItemGetList: ItemGetListDto) =>\n    this.restService.request<any, PagedResultDto<ItemWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/forms/item`,\n      params: { fields: ItemGetList.fields, value: ItemGetList.value, sorting: ItemGetList.sorting, skipCount: ItemGetList.skipCount, maxResultCount: ItemGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  options = () =>\n    this.restService.request<any, MetaData>({\n      method: 'OPTIONS',\n      url: `/api/form-management/forms`,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import type { MetaData, RecordGetListDto, RecordItemGetListDto, RecordItemWithDetailsDto, RecordWithDetailsDto } from './dtos/models';\nimport { RestService } from '@abp/ng.core';\nimport type { PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RecordsApiService {\n  apiName = 'Default';\n\n  getListByRecordGetList = (RecordGetList: RecordGetListDto) =>\n    this.restService.request<any, PagedResultDto<RecordWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/records/record`,\n      params: { fields: RecordGetList.fields, value: RecordGetList.value, sorting: RecordGetList.sorting, skipCount: RecordGetList.skipCount, maxResultCount: RecordGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByRecordItemGetList = (RecordItemGetList: RecordItemGetListDto) =>\n    this.restService.request<any, PagedResultDto<RecordItemWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/form-management/records/record-item`,\n      params: { fields: RecordItemGetList.fields, value: RecordItemGetList.value, sorting: RecordItemGetList.sorting, skipCount: RecordItemGetList.skipCount, maxResultCount: RecordItemGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  options = () =>\n    this.restService.request<any, MetaData>({\n      method: 'OPTIONS',\n      url: `/api/form-management/records`,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import type { SampleDto } from './models';\nimport { RestService } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SampleService {\n  apiName = 'Default';\n\n  get = () =>\n    this.restService.request<any, SampleDto>({\n      method: 'GET',\n      url: `/api/FormManagement/sample`,\n    },\n    { apiName: this.apiName });\n\n  getAuthorized = () =>\n    this.restService.request<any, SampleDto>({\n      method: 'GET',\n      url: `/api/FormManagement/sample/authorized`,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import type { CreateDirectoryInput, DirectoryContentDto, DirectoryContentRequestInput, DirectoryDescriptorDto, DirectoryDescriptorInfoDto, MoveDirectoryInput, RenameDirectoryInput } from './models';\nimport { RestService } from '@abp/ng.core';\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DirectoryDescriptorService {\n  apiName = 'FileManagement';\n\n  createByInput = (input: CreateDirectoryInput) =>\n    this.restService.request<any, DirectoryDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/directory-descriptor`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  deleteById = (id: string) =>\n    this.restService.request<any, void>({\n      method: 'DELETE',\n      url: `/api/file-management/directory-descriptor/${id}`,\n    },\n    { apiName: this.apiName });\n\n  getById = (id: string) =>\n    this.restService.request<any, DirectoryDescriptorDto>({\n      method: 'GET',\n      url: `/api/file-management/directory-descriptor/${id}`,\n    },\n    { apiName: this.apiName });\n\n  getContentByInput = (input: DirectoryContentRequestInput) =>\n    this.restService.request<any, PagedResultDto<DirectoryContentDto>>({\n      method: 'GET',\n      url: `/api/file-management/directory-descriptor`,\n      params: { filter: input.filter, sorting: input.sorting, id: input.id },\n    },\n    { apiName: this.apiName });\n\n  getListByParentId = (parentId: string) =>\n    this.restService.request<any, ListResultDto<DirectoryDescriptorInfoDto>>({\n      method: 'GET',\n      url: `/api/file-management/directory-descriptor/sub-directories`,\n      params: { parentId: parentId },\n    },\n    { apiName: this.apiName });\n\n  moveByInput = (input: MoveDirectoryInput) =>\n    this.restService.request<any, DirectoryDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/directory-descriptor/move`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  renameByIdAndInput = (id: string, input: RenameDirectoryInput) =>\n    this.restService.request<any, DirectoryDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/directory-descriptor/${id}`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n","import { mapEnumToOptions } from '@abp/ng.core';\n\nexport enum FileIconType {\n  FontAwesome = 0,\n  Url = 1,\n}\n\nexport const fileIconTypeOptions = mapEnumToOptions(FileIconType);\n","import type { CreateFileInput, FileDescriptorDto, FileUploadPreInfoDto, FileUploadPreInfoRequest, MoveFileInput, RenameFileInput } from './models';\nimport { RestService } from '@abp/ng.core';\nimport type { ListResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\nimport type { RemoteStreamContent } from '../../abp/content/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileDescriptorService {\n  apiName = 'FileManagement';\n\n  createByInput = (input: CreateFileInput) =>\n    this.restService.request<any, FileDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/file-descriptor`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  deleteById = (id: string) =>\n    this.restService.request<any, void>({\n      method: 'DELETE',\n      url: `/api/file-management/file-descriptor/${id}`,\n    },\n    { apiName: this.apiName });\n\n  downloadById = (id: string) =>\n    this.restService.request<any, RemoteStreamContent>({\n      method: 'GET',\n      url: `/api/file-management/file-descriptor/download/${id}`,\n    },\n    { apiName: this.apiName });\n\n  getById = (id: string) =>\n    this.restService.request<any, FileDescriptorDto>({\n      method: 'GET',\n      url: `/api/file-management/file-descriptor/${id}`,\n    },\n    { apiName: this.apiName });\n\n  getContentById = (id: string) =>\n    this.restService.request<any, number[]>({\n      method: 'GET',\n      url: `/api/file-management/file-descriptor/content`,\n      params: { id: id },\n    },\n    { apiName: this.apiName });\n\n  getListByDirectoryId = (directoryId: string) =>\n    this.restService.request<any, ListResultDto<FileDescriptorDto>>({\n      method: 'GET',\n      url: `/api/file-management/file-descriptor`,\n      params: { directoryId: directoryId },\n    },\n    { apiName: this.apiName });\n\n  getPreInfoByInput = (input: FileUploadPreInfoRequest[]) =>\n    this.restService.request<any, FileUploadPreInfoDto[]>({\n      method: 'POST',\n      url: `/api/file-management/file-descriptor/pre-upload-info`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  moveByInput = (input: MoveFileInput) =>\n    this.restService.request<any, FileDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/file-descriptor/move`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  renameByIdAndInput = (id: string, input: RenameFileInput) =>\n    this.restService.request<any, FileDescriptorDto>({\n      method: 'POST',\n      url: `/api/file-management/file-descriptor/${id}`,\n      body: input,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n"]}