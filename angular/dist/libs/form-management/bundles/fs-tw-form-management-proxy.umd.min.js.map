{"version":3,"sources":["../../../../libs/form-management/proxy/src/fs/form-management/documents/documents-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/forms/forms-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/records/records-api.service.ts","../../../../libs/form-management/proxy/src/fs/form-management/samples/sample.service.ts","../../../../libs/form-management/proxy/src/volo/file-management/directories/directory-descriptor.service.ts","../../../../libs/form-management/proxy/src/volo/file-management/files/file-icon-type.enum.ts","../../../../libs/form-management/proxy/src/volo/file-management/files/file-descriptor.service.ts"],"names":["DocumentsApiService","restService","_this","this","apiName","getListByDocumentDefinitionGetList","DocumentDefinitionGetList","request","method","url","params","fields","value","sorting","skipCount","maxResultCount","getListByVersionGetList","VersionGetList","options","Injectable","args","providedIn","RestService","FormsApiService","getListByFormalGetList","FormalGetList","getListByGroupGetList","GroupGetList","getListByItemGetList","ItemGetList","RecordsApiService","getListByRecordGetList","RecordGetList","getListByRecordItemGetList","RecordItemGetList","SampleService","get","getAuthorized","DirectoryDescriptorService","createByInput","input","body","deleteById","id","getById","getContentByInput","filter","getListByParentId","parentId","moveByInput","renameByIdAndInput","FileIconType","FileDescriptorService","downloadById","getContentById","getListByDirectoryId","directoryId","getPreInfoByInput","fileIconTypeOptions","mapEnumToOptions"],"mappings":"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","sourcesContent":["import type { DocumentDefinitionGetListDto, DocumentDefinitionWithDetailsDto, MetaData, VersionGetListDto, VersionWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DocumentsApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByDocumentDefinitionGetList = (DocumentDefinitionGetList: DocumentDefinitionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<DocumentDefinitionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/documents/document-definition`,\r\n      params: { fields: DocumentDefinitionGetList.fields, value: DocumentDefinitionGetList.value, sorting: DocumentDefinitionGetList.sorting, skipCount: DocumentDefinitionGetList.skipCount, maxResultCount: DocumentDefinitionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByVersionGetList = (VersionGetList: VersionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<VersionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/documents/version`,\r\n      params: { fields: VersionGetList.fields, value: VersionGetList.value, sorting: VersionGetList.sorting, skipCount: VersionGetList.skipCount, maxResultCount: VersionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/form-management/documents`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { FormalGetListDto, FormalWithDetailsDto, GroupGetListDto, GroupWithDetailsDto, ItemGetListDto, ItemWithDetailsDto, MetaData } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormsApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByFormalGetList = (FormalGetList: FormalGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<FormalWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/forms/formal`,\r\n      params: { fields: FormalGetList.fields, value: FormalGetList.value, sorting: FormalGetList.sorting, skipCount: FormalGetList.skipCount, maxResultCount: FormalGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByGroupGetList = (GroupGetList: GroupGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<GroupWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/forms/group`,\r\n      params: { fields: GroupGetList.fields, value: GroupGetList.value, sorting: GroupGetList.sorting, skipCount: GroupGetList.skipCount, maxResultCount: GroupGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByItemGetList = (ItemGetList: ItemGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<ItemWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/forms/item`,\r\n      params: { fields: ItemGetList.fields, value: ItemGetList.value, sorting: ItemGetList.sorting, skipCount: ItemGetList.skipCount, maxResultCount: ItemGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/form-management/forms`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { MetaData, RecordGetListDto, RecordItemGetListDto, RecordItemWithDetailsDto, RecordWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RecordsApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByRecordGetList = (RecordGetList: RecordGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<RecordWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/records/record`,\r\n      params: { fields: RecordGetList.fields, value: RecordGetList.value, sorting: RecordGetList.sorting, skipCount: RecordGetList.skipCount, maxResultCount: RecordGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByRecordItemGetList = (RecordItemGetList: RecordItemGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<RecordItemWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/form-management/records/record-item`,\r\n      params: { fields: RecordItemGetList.fields, value: RecordItemGetList.value, sorting: RecordItemGetList.sorting, skipCount: RecordItemGetList.skipCount, maxResultCount: RecordItemGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/form-management/records`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { SampleDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SampleService {\r\n  apiName = 'Default';\r\n\r\n  get = () =>\r\n    this.restService.request<any, SampleDto>({\r\n      method: 'GET',\r\n      url: `/api/FormManagement/sample`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getAuthorized = () =>\r\n    this.restService.request<any, SampleDto>({\r\n      method: 'GET',\r\n      url: `/api/FormManagement/sample/authorized`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { CreateDirectoryInput, DirectoryContentDto, DirectoryContentRequestInput, DirectoryDescriptorDto, DirectoryDescriptorInfoDto, MoveDirectoryInput, RenameDirectoryInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoryDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentByInput = (input: DirectoryContentRequestInput) =>\r\n    this.restService.request<any, PagedResultDto<DirectoryContentDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      params: { filter: input.filter, sorting: input.sorting, id: input.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByParentId = (parentId: string) =>\r\n    this.restService.request<any, ListResultDto<DirectoryDescriptorInfoDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/sub-directories`,\r\n      params: { parentId: parentId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum FileIconType {\r\n  FontAwesome = 0,\r\n  Url = 1,\r\n}\r\n\r\nexport const fileIconTypeOptions = mapEnumToOptions(FileIconType);\r\n","import type { CreateFileInput, FileDescriptorDto, FileUploadPreInfoDto, FileUploadPreInfoRequest, MoveFileInput, RenameFileInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { RemoteStreamContent } from '../../abp/content/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FileDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  downloadById = (id: string) =>\r\n    this.restService.request<any, RemoteStreamContent>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/download/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentById = (id: string) =>\r\n    this.restService.request<any, number[]>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/content`,\r\n      params: { id: id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByDirectoryId = (directoryId: string) =>\r\n    this.restService.request<any, ListResultDto<FileDescriptorDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor`,\r\n      params: { directoryId: directoryId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getPreInfoByInput = (input: FileUploadPreInfoRequest[]) =>\r\n    this.restService.request<any, FileUploadPreInfoDto[]>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/pre-upload-info`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}