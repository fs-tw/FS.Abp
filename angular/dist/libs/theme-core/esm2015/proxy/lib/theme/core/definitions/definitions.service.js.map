{"version":3,"file":"definitions.service.js","sourceRoot":"../../../../../libs/theme-core/proxy/src/","sources":["lib/theme/core/definitions/definitions.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;AAK3C,MAAM,OAAO,kBAAkB;IAgE7B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QA/D5C,YAAO,GAAG,SAAS,CAAC;QAEpB,uCAAkC,GAAG,CAAC,OAAe,EAAE,KAAyB,EAAE,EAAE,CAClF,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,0BAA0B,OAAO,EAAE;YACxC,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,qCAAgC,GAAG,CAAC,OAAe,EAAE,KAAuB,EAAE,EAAE,CAC9E,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,wBAAwB,OAAO,EAAE;YACtC,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,wBAAmB,GAAG,CAAC,EAAU,EAAE,EAAE,CACnC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,QAAQ;YAChB,GAAG,EAAE,mBAAmB,EAAE,EAAE;SAC7B,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,sBAAiB,GAAG,CAAC,OAAe,EAAE,EAAE,CACtC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAgB;YACtC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,mBAAmB,OAAO,EAAE;SAClC,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,+BAA0B,GAAG,GAAG,EAAE,CAChC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAgB;YACtC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,0BAA0B;SAChC,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,uCAAkC,GAAG,CAAC,OAAe,EAAE,KAAoB,EAAE,EAAE,CAC7E,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,oCAAoC,OAAO,EAAE;YAClD,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,kCAA6B,GAAG,CAAC,OAAe,EAAE,KAAuB,EAAE,EAAE,CAC3E,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,wBAAwB,OAAO,EAAE;YACtC,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,qCAAgC,GAAG,CAAC,OAAe,EAAE,KAAwB,EAAE,EAAE,CAC/E,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YAClC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,iCAAiC,OAAO,EAAE;YAC/C,IAAI,EAAE,KAAK;SACZ,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAEkB,CAAC;;;;YAnEjD,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YALQ,WAAW","sourcesContent":["import type { BannerForCreateDto, BannerForSort, MenuForCreateDto, MenuForUpdateDto, ThemeDto, ThemeForUpdateDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DefinitionsService {\r\n  apiName = 'Default';\r\n\r\n  createThemeBannerByThemeNoAndInput = (themeNo: string, input: BannerForCreateDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'POST',\r\n      url: `/api/theme-core/banner/${themeNo}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  createThemeMenuByThemeNoAndInput = (themeNo: string, input: MenuForCreateDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'POST',\r\n      url: `/api/theme-core/menu/${themeNo}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteThemeCodeById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/theme-core/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getThemeByThemeNo = (themeNo: string) =>\r\n    this.restService.request<any, ThemeDto>({\r\n      method: 'GET',\r\n      url: `/api/theme-core/${themeNo}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getThemeDefinitionChildren = () =>\r\n    this.restService.request<any, string[]>({\r\n      method: 'GET',\r\n      url: `/api/theme-core/themeNos`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  putBannersForSortByThemeNoAndInput = (themeNo: string, input: BannerForSort) =>\r\n    this.restService.request<any, void>({\r\n      method: 'PUT',\r\n      url: `/api/theme-core/banners-for-sort/${themeNo}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  putThemeMenuByThemeNoAndInput = (themeNo: string, input: MenuForUpdateDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'PUT',\r\n      url: `/api/theme-core/menu/${themeNo}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  putThemeSettingByThemeNoAndInput = (themeNo: string, input: ThemeForUpdateDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'PUT',\r\n      url: `/api/theme-core/theme-setting/${themeNo}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}