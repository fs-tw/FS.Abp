{"version":3,"file":"routes-api.service.js","sourceRoot":"","sources":["../../../../../../../../libs/theme/proxy/src/fs/theme/routes/routes-api.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;AAK3C,MAAM,OAAO,gBAAgB;IA0B3B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAzB5C,YAAO,GAAG,SAAS,CAAC;QAEpB,oCAA+B,GAAG,CAAC,sBAAiD,EAAE,EAAE,CACtF,IAAI,CAAC,WAAW,CAAC,OAAO,CAAqD;YAC3E,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,oCAAoC;YACzC,MAAM,EAAE,EAAE,MAAM,EAAE,sBAAsB,CAAC,MAAM,EAAE,KAAK,EAAE,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,sBAAsB,CAAC,OAAO,EAAE,SAAS,EAAE,sBAAsB,CAAC,SAAS,EAAE,cAAc,EAAE,sBAAsB,CAAC,cAAc,EAAE;SACpO,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,0BAAqB,GAAG,CAAC,YAA6B,EAAE,EAAE,CACxD,IAAI,CAAC,WAAW,CAAC,OAAO,CAA2C;YACjE,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,yBAAyB;YAC9B,MAAM,EAAE,EAAE,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC,SAAS,EAAE,cAAc,EAAE,YAAY,CAAC,cAAc,EAAE;SAClL,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7B,YAAO,GAAG,GAAG,EAAE,CACb,IAAI,CAAC,WAAW,CAAC,OAAO,CAAgB;YACtC,MAAM,EAAE,SAAS;YACjB,GAAG,EAAE,mBAAmB;SACzB,EACD,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAEkB,CAAC;;;;YA7BjD,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YANQ,WAAW","sourcesContent":["import type { MetaData, RouteDefinitionGetListDto, RouteDefinitionWithDetailsDto, RouteGetListDto, RouteWithDetailsDto } from './dtos/models';\nimport { RestService } from '@abp/ng.core';\nimport type { PagedResultDto } from '@abp/ng.core';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutesApiService {\n  apiName = 'Default';\n\n  getListByRouteDefinitionGetList = (RouteDefinitionGetList: RouteDefinitionGetListDto) =>\n    this.restService.request<any, PagedResultDto<RouteDefinitionWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/theme/routes/route-definition`,\n      params: { fields: RouteDefinitionGetList.fields, value: RouteDefinitionGetList.value, sorting: RouteDefinitionGetList.sorting, skipCount: RouteDefinitionGetList.skipCount, maxResultCount: RouteDefinitionGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  getListByRouteGetList = (RouteGetList: RouteGetListDto) =>\n    this.restService.request<any, PagedResultDto<RouteWithDetailsDto>>({\n      method: 'GET',\n      url: `/api/theme/routes/route`,\n      params: { fields: RouteGetList.fields, value: RouteGetList.value, sorting: RouteGetList.sorting, skipCount: RouteGetList.skipCount, maxResultCount: RouteGetList.maxResultCount },\n    },\n    { apiName: this.apiName });\n\n  options = () =>\n    this.restService.request<any, MetaData>({\n      method: 'OPTIONS',\n      url: `/api/theme/routes`,\n    },\n    { apiName: this.apiName });\n\n  constructor(private restService: RestService) {}\n}\n"]}