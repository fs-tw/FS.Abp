{"version":3,"sources":["../../../../libs/theme/proxy/src/fs/abp/file/directories/directories-api.service.ts","../../../../libs/theme/proxy/src/fs/abp/file/files/files-api.service.ts","../../../../libs/theme/proxy/src/fs/theme/banners/banners-api.service.ts","../../../../libs/theme/proxy/src/fs/theme/routes/routes-api.service.ts","../../../../libs/theme/proxy/src/fs/theme/web-sites/web-sites-api.service.ts","../../../../libs/theme/proxy/src/volo/file-management/directories/directory-descriptor.service.ts","../../../../libs/theme/proxy/src/volo/file-management/files/file-icon-type.enum.ts","../../../../libs/theme/proxy/src/volo/file-management/files/file-descriptor.service.ts"],"names":["DirectoriesApiService","restService","_this","this","apiName","findByProviderByKeyAndGroup","key","group","request","method","url","params","getDefinitions","Injectable","args","providedIn","RestService","FilesApiService","getContentById","id","BannersApiService","getListByBannerDefinitionGetList","BannerDefinitionGetList","fields","value","sorting","skipCount","maxResultCount","getListByBannerGetList","BannerGetList","options","RoutesApiService","getListByRouteDefinitionGetList","RouteDefinitionGetList","getListByRouteGetList","RouteGetList","WebSitesApiService","getListByWebSiteDefinitionGetList","WebSiteDefinitionGetList","DirectoryDescriptorService","createByInput","input","body","deleteById","getById","getContentByInput","filter","getListByParentId","parentId","moveByInput","renameByIdAndInput","FileIconType","FileDescriptorService","downloadById","getListByDirectoryId","directoryId","getPreInfoByInput","fileIconTypeOptions","mapEnumToOptions"],"mappings":"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","sourcesContent":["import type { DirectoryDescriptorDto } from './dtos/models';\r\nimport type { DirectoryProviderDefinition } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoriesApiService {\r\n  apiName = 'Default';\r\n\r\n  findByProviderByKeyAndGroup = (key: string, group?: string) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/provider/${key}`,\r\n      params: { group: group },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getDefinitions = () =>\r\n    this.restService.request<any, DirectoryProviderDefinition[]>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/definitions`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { IActionResult } from '../../../../microsoft/asp-net-core/mvc/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FilesApiService {\r\n  apiName = 'Default';\r\n\r\n  getContentById = (id: string) =>\r\n    this.restService.request<any, IActionResult>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/file-content`,\r\n      params: { id: id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { BannerDefinitionGetListDto, BannerDefinitionWithDetailsDto, BannerGetListDto, BannerWithDetailsDto, MetaData } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BannersApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByBannerDefinitionGetList = (BannerDefinitionGetList: BannerDefinitionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<BannerDefinitionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/theme/banners/banner-definition`,\r\n      params: { fields: BannerDefinitionGetList.fields, value: BannerDefinitionGetList.value, sorting: BannerDefinitionGetList.sorting, skipCount: BannerDefinitionGetList.skipCount, maxResultCount: BannerDefinitionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByBannerGetList = (BannerGetList: BannerGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<BannerWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/theme/banners/banner`,\r\n      params: { fields: BannerGetList.fields, value: BannerGetList.value, sorting: BannerGetList.sorting, skipCount: BannerGetList.skipCount, maxResultCount: BannerGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/theme/banners`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { MetaData, RouteDefinitionGetListDto, RouteDefinitionWithDetailsDto, RouteGetListDto, RouteWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RoutesApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByRouteDefinitionGetList = (RouteDefinitionGetList: RouteDefinitionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<RouteDefinitionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/theme/routes/route-definition`,\r\n      params: { fields: RouteDefinitionGetList.fields, value: RouteDefinitionGetList.value, sorting: RouteDefinitionGetList.sorting, skipCount: RouteDefinitionGetList.skipCount, maxResultCount: RouteDefinitionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByRouteGetList = (RouteGetList: RouteGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<RouteWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/theme/routes/route`,\r\n      params: { fields: RouteGetList.fields, value: RouteGetList.value, sorting: RouteGetList.sorting, skipCount: RouteGetList.skipCount, maxResultCount: RouteGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/theme/routes`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { MetaData, WebSiteDefinitionGetListDto, WebSiteDefinitionWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WebSitesApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByWebSiteDefinitionGetList = (WebSiteDefinitionGetList: WebSiteDefinitionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<WebSiteDefinitionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/theme/web-sites/web-site-definition`,\r\n      params: { fields: WebSiteDefinitionGetList.fields, value: WebSiteDefinitionGetList.value, sorting: WebSiteDefinitionGetList.sorting, skipCount: WebSiteDefinitionGetList.skipCount, maxResultCount: WebSiteDefinitionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/theme/web-sites`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { CreateDirectoryInput, DirectoryContentDto, DirectoryContentRequestInput, DirectoryDescriptorDto, DirectoryDescriptorInfoDto, MoveDirectoryInput, RenameDirectoryInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoryDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentByInput = (input: DirectoryContentRequestInput) =>\r\n    this.restService.request<any, PagedResultDto<DirectoryContentDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      params: { filter: input.filter, sorting: input.sorting, id: input.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByParentId = (parentId: string) =>\r\n    this.restService.request<any, ListResultDto<DirectoryDescriptorInfoDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/sub-directories`,\r\n      params: { parentId: parentId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameDirectoryInput) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum FileIconType {\r\n  FontAwesome = 0,\r\n  Url = 1,\r\n}\r\n\r\nexport const fileIconTypeOptions = mapEnumToOptions(FileIconType);\r\n","import type { CreateFileInput, FileDescriptorDto, FileUploadPreInfoDto, FileUploadPreInfoRequest, MoveFileInput, RenameFileInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { RemoteStreamContent } from '../../abp/content/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FileDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  downloadById = (id: string) =>\r\n    this.restService.request<any, RemoteStreamContent>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/download/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentById = (id: string) =>\r\n    this.restService.request<any, number[]>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/content`,\r\n      params: { id: id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByDirectoryId = (directoryId: string) =>\r\n    this.restService.request<any, ListResultDto<FileDescriptorDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor`,\r\n      params: { directoryId: directoryId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getPreInfoByInput = (input: FileUploadPreInfoRequest[]) =>\r\n    this.restService.request<any, FileUploadPreInfoDto[]>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/pre-upload-info`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}