{"version":3,"file":"page.service.js","sourceRoot":"","sources":["../../../../../../../../libs/cms/admin/src/lib/tag-management/providers/page.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAI/B,MAAM,OAAO,WAAW;IAqBtB;QAnBQ,eAAU,GAAG,IAAI,OAAO,EAAS,CAAC;QAClC,YAAO,GAAG,IAAI,OAAO,EAAO,CAAC;QAErB,gBAAW,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;QAC7C,aAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IAiBnD,CAAC;IAfL,kBAAkB;QAChB,4FAA4F;IAC9F,CAAC;IAED,gBAAgB,CAAC,OAAe;QAC9B,IAAI,CAAC,OAAO,EAAE;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,OAAO;SACR;QAAA,CAAC;QACF,qGAAqG;IACvG,CAAC;;;YAnBF,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { Fs } from '@fs-tw/cms/proxy';\r\nimport { take, tap } from 'rxjs/operators';\r\n@Injectable()\r\nexport class PageService {\r\n\r\n  private allTagData = new Subject<any[]>();\r\n  private tagData = new Subject<any>();\r\n\r\n  public readonly allTagData$ = this.allTagData.asObservable();\r\n  public readonly tagData$ = this.tagData.asObservable();\r\n\r\n  getTageListFromApi() {\r\n    // this.tagsApiService.tagGroupGetList().pipe(tap(x => this.allTagData.next(x))).subscribe()\r\n  }\r\n\r\n  getTagOneFromApi(groupId: string) {\r\n    if (!groupId) {\r\n      this.tagData.next(null);\r\n      return;\r\n    };\r\n    // this.tagsApiService.tagGroupGetByIdById(groupId).pipe(tap(x => this.tagData.next(x))).subscribe();\r\n  }\r\n\r\n\r\n  constructor(\r\n    //private tagsApiService: Fs.Cms.Tags.TagsApiService\r\n  ) { }\r\n\r\n\r\n  /**call api */\r\n\r\n  // //create\r\n  // createGroup(tagGroup: TagGroupForCreateDto) {\r\n  //   return this.tagsApiService.tagGroupCreateByInput(tagGroup);\r\n  // }\r\n\r\n  // createGroupAndTags(id: string, tags: TagForCreateDto[]) {\r\n  //   return this.tagsApiService.tagGroupAddTagsByIdAndTags(id, tags);\r\n  // }\r\n\r\n  // // update\r\n  // updateGroup(id: string, newTagGroupName: string) {\r\n  //   return this.tagsApiService.tagGroupUpdateByIdAndInput(id, { tagGroupName: newTagGroupName });\r\n  // }\r\n\r\n  // updateTag(id: string, newtagName: string) {\r\n  //   return this.tagsApiService.putTagByIdAndInput(id, { name: newtagName });\r\n  // }\r\n\r\n  // // delate\r\n  // deleteGroup(groupId: string) {\r\n  //   return this.tagsApiService.tagGroupDeleteById(groupId)\r\n  // }\r\n\r\n  // delteTag(tagId: string) {\r\n  //   return this.tagsApiService.tagDeleteById(tagId);\r\n  // }\r\n}\r\n"]}