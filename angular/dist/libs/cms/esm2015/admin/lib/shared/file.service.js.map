{"version":3,"file":"file.service.js","sourceRoot":"","sources":["../../../../../../../libs/cms/admin/src/lib/shared/file.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAoB,MAAM,cAAc,CAAC;;;AAYjF,MAAM,OAAO,WAAW;IAEtB,YACU,WAAwB,EACxB,kBAAsC;QADtC,gBAAW,GAAX,WAAW,CAAa;QACxB,uBAAkB,GAAlB,kBAAkB,CAAoB;IAEhD,CAAC;IAED,UAAU,CAAC,EAAE;QACX,IAAI,CAAC,EAAE;YAAE,OAAO,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,GAAG,kCAAkC,GAAG,EAAE,CAAA;IACtF,CAAC;IAED,UAAU,CAAC,IAAU,EAAE,WAAmB;QACxC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACtC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9B,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAyB;YACtD,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,6CAA6C;YAClD,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE;SACrC,CAAC,CAAC;IACL,CAAC;IAGD,eAAe,CAAC,EAAU;QACxB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAY;YACzC,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,8BAA8B;YACnC,MAAM,EAAE,EAAE,EAAE,EAAE;YACd,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;;;;YApCF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;YAXL,WAAW;YAA/B,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { EnvironmentService, RestService, AuditedEntityDto } from '@abp/ng.core';\r\n// import { FileDescriptorDto } from '@volo/abp.ng.file-management'\r\n\r\n// TODO USE @volo/abp.ng.file-management FileDescriptorDto\r\nexport interface FileDescriptorDto extends AuditedEntityDto<string> {\r\n  directoryId?: string;\r\n  name: string;\r\n  mimeType: string;\r\n  size: number;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FileService {\r\n\r\n  constructor(\r\n    private restService: RestService,\r\n    private environmentService: EnvironmentService,\r\n  ) {\r\n  }\r\n\r\n  getFileUrl(id) {\r\n    if (!id) return \"\";\r\n    return this.environmentService.getApiUrl() + \"/api/file/files/file-content?id=\" + id\r\n  }\r\n\r\n  uploadFile(file: File, directoryId: string) {    \r\n    const formData = new FormData();\r\n    formData.append(\"relativePath\", null);\r\n    formData.append(\"file\", file);\r\n    formData.append(\"name\", file.name);   \r\n    formData.append(\"type\", file.type);\r\n    return this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/upload`,\r\n      body: formData,\r\n      params: { directoryId: directoryId }\r\n    });\r\n  }\r\n\r\n\r\n  getFileBlobById(id: string) {\r\n    return this.restService.request<any, Blob>({\r\n      method: 'GET',\r\n      url: `/api/file/files/file-content`,\r\n      params: { id },\r\n      responseType: 'blob'\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]}