{"version":3,"file":"tag.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/cms/admin/src/lib/post/components/tag/tag.component.ts","../../../../../../../../../libs/cms/admin/src/lib/post/components/tag/tag.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAiB,MAAM,eAAe,CAAC;;AACzD,+CAA+C;AAC/C,iEAAiE;AACjE,+BAA+B;AAC/B,qCAAqC;AACrC,yCAAyC;AACzC,8DAA8D;AAM9D,MAAM,OAAO,YAAY;IAEvB,QAAQ;IAER,CAAC;;wEAJU,YAAY;iDAAZ,YAAY;QCZzB,qBAAI;;uFDYS,YAAY;cALxB,SAAS;eAAC;gBACT,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\n// import { group } from '@angular/animations';\r\n// import { PostTagMapDto, TagGroupDto } from '@fs-tw/cms/proxy';\r\n// import * as _ from 'lodash';\r\n// import { Observable } from 'rxjs';\r\n// import { take } from 'rxjs/operators';\r\n// import { PageService } from '../../providers/page.service';\r\n@Component({\r\n  selector: 'fs-tag',\r\n  templateUrl: './tag.component.html',\r\n  styleUrls: ['./tag.component.css']\r\n})\r\nexport class TagComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  // postTagsDict: { [tagCodeId: string]: PostTagMapDto; } = {};\r\n\r\n  // @Input() postId: string;\r\n\r\n  // @Input()\r\n  // set postTags(val: PostTagMapDto[]) {    \r\n  //   for (let item of val) {\r\n  //     this.postTagsDict[item.tagCodeId] = item;\r\n  //   }\r\n\r\n  //   this.existTagCodeIds = val.map(x => x.tagCodeId);\r\n\r\n  //   this.pageService.getAllTags().pipe(take(1)).subscribe(x => {\r\n  //     this.tagGroups = x;\r\n  //     for (let group of this.tagGroups) {\r\n  //       for (let tag of group.tags) {\r\n  //         if (this.existTagCodeIds.includes(tag.id)) {\r\n  //           tag.check = true;\r\n  //           continue;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  // existTagCodeIds: string[] = [];\r\n  // tagGroups: any[] = []\r\n  // constructor(\r\n  //   private pageService: PageService,\r\n  // ) { }\r\n\r\n  // ngOnInit(): void {}\r\n\r\n  // checkParent(group: any) {\r\n  //   group.check = !group.check;\r\n  //   for (let item of group.tags) {\r\n  //     item.check = group.check;\r\n  //   }\r\n\r\n  // }\r\n  // checkChild(tag: any) {\r\n  //   tag.check = !tag.check;\r\n  // }\r\n\r\n\r\n  // save(postId?: string): Observable<any>[] {\r\n  //   if(!this.postId) this.postId = postId;\r\n  //   let tags: any[] = _.flatMap(this.tagGroups, \"tags\").filter(x => x.check);\r\n  //   let deleteTargetIds: string[] = _.xorWith(this.existTagCodeIds, tags.map(x => x.id));\r\n  //   let action: Observable<any>[] = [];\r\n  //   for (let tagCodeId of deleteTargetIds) {\r\n  //     if (this.postTagsDict[tagCodeId]) {\r\n  //       action.push(this.pageService.deletePostTagMap(this.postTagsDict[tagCodeId].id));\r\n  //     } else {\r\n  //       action.push(this.pageService.createPostTagMap(this.postId, tagCodeId));\r\n  //     }\r\n  //   }\r\n  //   return action;\r\n  // }\r\n}\r\n","<br>\r\n<!-- <label>搜尋標籤：</label>\r\n\r\n<nz-select nzSize='small' [(ngModel)]=\"select\" nzAllowClear nzShowSearch style=\"width: 200px;\">\r\n    <nz-option-group *ngFor=\"let item of tagGroups\" [nzLabel]=\"item.tagGroupName\">\r\n        <nz-option *ngFor=\"let i of item.tags\" [nzLabel]=\"i.name\" [nzValue]=\"i.name\"></nz-option>\r\n    </nz-option-group>\r\n</nz-select>\r\n<button nz-button nzType=\"primary\" nzShape=\"circle\"><i nz-icon nzType=\"search\"></i></button> -->\r\n\r\n<!-- 只啟用以下 table -->\r\n<!-- <nz-table #smallTable nzBordered nzSize=\"small\" [nzData]=\"tagGroups\" style=\"width: 500px;\" nzShowPagination=\"false\"\r\n    style=\"margin-top: 10px;\">\r\n    <thead>\r\n        <tr>\r\n            <th nzAlign=\"center\">分類</th>\r\n            <th nzAlign=\"center\">標籤</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let tagGroup of smallTable.data; let parentIndex = index\" class=\"bg-white\">\r\n            <td>\r\n                <nz-tag [nzColor]=\"tagGroup.check? 'green' : 'default'\" (click)=\"checkParent(tagGroup)\" class=\"pointer\">\r\n                    <i nz-icon [nzType]=\"tagGroup.check ? 'check' : 'close'\"></i>\r\n                    {{ tagGroup.tagGroupName }}\r\n                </nz-tag>\r\n            </td>\r\n            <td>               \r\n                <nz-tag *ngFor=\"let tagItem of tagGroup.tags; let childIndex = index\" class=\"pointer\"\r\n                    [nzColor]=\"tagItem.check ? 'green' : 'default'\" (click)=\"checkChild(tagItem)\">\r\n                    <i nz-icon [nzType]=\"tagItem.check ? 'check' : 'close'\"></i>\r\n                    {{ tagItem.name }}\r\n                </nz-tag>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</nz-table> -->\r\n\r\n<!-- <button (click)=\"save()\">check</button> -->"]}