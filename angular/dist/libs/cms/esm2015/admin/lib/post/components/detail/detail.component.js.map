{"version":3,"file":"detail.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/cms/admin/src/lib/post/components/detail/detail.component.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAgC,MAAM,eAAe,CAAC;;AACxE,4DAA4D;AAC5D,4DAA4D;AAC5D,4FAA4F;AAC5F,uCAAuC;AACvC,+CAA+C;AAC/C,mDAAmD;AACnD,8DAA8D;AAC9D,8EAA8E;AAC9E,8EAA8E;AAC9E,uDAAuD;AACvD,6CAA6C;AAM7C,MAAM,OAAO,eAAe;IAE1B,QAAQ;IAER,CAAC;;8EAJU,eAAe;oDAAf,eAAe;uFAAf,eAAe;cAL3B,SAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC","sourcesContent":["import { ConfigStateService,EnvironmentService } from '@abp/ng.core';\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\n// import { ActivatedRoute, Router } from '@angular/router';\r\n// import { BlogDto, PostImageDto } from '@fs-tw/cms/proxy';\r\n// import { Confirmation, ConfirmationService, ToasterService } from '@abp/ng.theme.shared';\r\n// import { Store } from '@ngxs/store';\r\n// import { forkJoin, Observable } from 'rxjs';\r\n// import { FileService } from '@fs-tw/theme-core';\r\n// import { PageService } from '../../providers/page.service';\r\n// import { PostsStateService } from '../../providers/post/poststate.service';\r\n// import { UploadFileComponent } from '../upload-file/upload-file.component';\r\n// import { TagComponent } from '../tag/tag.component';\r\n// import { finalize } from 'rxjs/operators';\r\n@Component({\r\n  selector: 'fs-detail',\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.less']\r\n})\r\nexport class DetailComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  // apiUrl = \"\";\r\n  // @ViewChild(UploadFileComponent) uploadFileComponent: UploadFileComponent;\r\n\r\n  // @ViewChild(TagComponent) tagComponent: TagComponent;\r\n\r\n  // data: any =\r\n  //   { published: true, published_At: new Date(), attachmentFileUrls: [], content: \"\", postImages: [], postTags: [] };\r\n\r\n  // isVisible = false;\r\n  // selectImage = \"\";\r\n  // showList = [];\r\n  // fileList = [];\r\n  // isSpinning = false;\r\n  // blogs: BlogDto[] = []\r\n\r\n\r\n\r\n\r\n  // constructor(\r\n  //   private confirmationService: ConfirmationService,\r\n  //   private toasterService: ToasterService,\r\n  //   private postsStateService: PostsStateService,\r\n  //   private configStateService: ConfigStateService,\r\n  //   private activatedRoute: ActivatedRoute,\r\n  //   private pageService: PageService,\r\n  //   private fileService: FileService,\r\n  //   private environmentService:EnvironmentService,\r\n  //   private router: Router,\r\n  // ) {\r\n\r\n  //   this.apiUrl = this.environmentService.getApiUrl() + \"/\";\r\n  //   this.getBlogs();\r\n  //   this.activatedRoute.params.subscribe(x => {\r\n  //     if (x.id) {\r\n  //       this.isSpinning = true;\r\n  //       this.pageService.getPostById(x[\"id\"]).subscribe(post => {\r\n  //         this.data = post;\r\n  //         this.isSpinning = false;\r\n  //         this.init_list();\r\n  //       })\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n  // getBlogs() {\r\n  //   this.pageService.blogGetList().subscribe(x => {\r\n  //     this.blogs = x;\r\n  //   });\r\n  // }\r\n\r\n  // ngOnDestroy(): void { }\r\n\r\n  // ngOnInit() { }\r\n\r\n  // getUrl(x: string) {\r\n  //   if (x.includes('http')) {\r\n  //     return x;\r\n  //   } else {\r\n  //     return this.fileService.getFileByName(x);\r\n  //   }\r\n  // }\r\n\r\n  // getFileName(x: string) {\r\n  //   let splitStr = x.split(\"\\\\\");\r\n  //   return splitStr[splitStr.length - 1];\r\n  // }\r\n\r\n  // init_list() {\r\n  //   this.fileList = [];\r\n  //   this.showList = this.data.postImages.map((item, index) => {\r\n  //     return {\r\n  //       uid: index.toString(),\r\n  //       status: 'done',\r\n  //       type: \"image/jpeg\",\r\n  //       url: this.getUrl(item.url),\r\n  //       thumbUrl: this.getUrl(item.url),\r\n  //       needDelete: true,\r\n  //       isCover: item.isCover,\r\n  //       name: this.getFileName(item.url),\r\n  //       or_url: item.url\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // showModal(imgUrl: string): void {\r\n  //   this.isVisible = true;\r\n  //   this.selectImage = imgUrl;\r\n  // }\r\n\r\n  // handleCancel(): void {\r\n  //   this.isVisible = false;\r\n  // }\r\n\r\n\r\n  // setFileUrls(event) {\r\n  //   this.data.attachmentFileUrls = event;\r\n  // }\r\n\r\n  // beforeUpload = (file: any): boolean => {\r\n  //   var reader = new FileReader();\r\n  //   reader.readAsDataURL(file);\r\n  //   var vm = this;\r\n  //   reader.addEventListener(\"load\", function () {\r\n  //     file.url = reader.result;\r\n  //     file.needDelete = false;\r\n  //     vm.fileList.push(file);\r\n  //     vm.showList.push(file);\r\n  //   }, false);\r\n  //   return false;\r\n  // };\r\n\r\n  // delete(item: any, index: number) {\r\n  //   this.confirmationService.warn(\r\n  //     '確認要刪除嗎？',\r\n  //     '系統訊息', {\r\n  //     cancelText: \"關閉\",\r\n  //     yesText: \"確定\"\r\n  //   }).subscribe((status: Confirmation.Status) => {\r\n  //     if (status === Confirmation.Status.confirm) {\r\n  //       this.showList.splice(index, 1);\r\n  //     }\r\n  //   });\r\n\r\n  // }\r\n\r\n  // save() {\r\n  //   this.isSpinning = true\r\n  //   let mes = \"建立成功！\";\r\n  //   if (this.data.id) mes = \"更新成功！\";\r\n  //   let cover = this.showList.find(x => { return x.isCover == true });\r\n\r\n  //   let result = this.handleUpload()\r\n  //   let im: string[] = this.showList.map(x => x.or_url);\r\n  //   let old_images = this.data.postImages.filter(x => im.some(y => y == x.url));\r\n  //   this.data.postImages = result.concat(old_images);\r\n  //   if (cover) {\r\n  //     this.data.postImages.forEach(x => {\r\n  //       if (x.url.includes(cover.name)) x.isCover = true;\r\n  //       else x.isCover = false;\r\n  //     });\r\n  //   }\r\n  //   this.data.attachmentFileUrls = this.uploadFileComponent.save();\r\n  //   this.data.published_At = new Date(this.data.published_At).toLocalISOString();\r\n  //   let act: Observable<any>;\r\n  //   if (this.data.id) {\r\n  //     act = this.postsStateService.update(this.data, this.data.id);\r\n  //   } else {\r\n  //     act = this.postsStateService.create(this.data);\r\n  //   }\r\n  //   act.subscribe(x => {\r\n  //     forkJoin(this.tagComponent.save(x.id)).pipe(finalize(() => {\r\n  //       this.toasterService.success(mes);\r\n  //       this.isSpinning = false;\r\n  //       this.router.navigate([\"cms/post\"], { queryParams: { blog: this.data.blogCodeId } });\r\n  //     })).subscribe(x => { })\r\n  //   });\r\n  // }\r\n\r\n  // handleUpload(): PostImageDto[] {\r\n  //   const randomName = Array(32).fill(null).map(() => (Math.round(Math.random() * 16)).toString(16)).join('');\r\n  //   const formData = new FormData();\r\n  //   let postImageList: PostImageDto[] = []\r\n  //   this.fileList.forEach((file: any) => {\r\n  //     let url = `cms\\\\posts\\\\${randomName}\\\\${file.name}`;\r\n  //     postImageList.push({ url, isCover: false });\r\n  //     formData.append('files[]', file, url);\r\n  //   });\r\n  //   this.fileService.uploadFileByFormData(formData).subscribe(() => {\r\n  //   }, (error) => {\r\n  //     this.toasterService.error(\"上傳失敗\");\r\n  //   });\r\n\r\n  //   return postImageList;\r\n  // }\r\n\r\n  // refreshStatus(input) {\r\n  //   this.showList.forEach(x => {\r\n  //     if (x.uid != input.uid) x.isCover = false;\r\n  //   });\r\n  // }\r\n}\r\n"]}