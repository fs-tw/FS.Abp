{"version":3,"file":"detail.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/cms/admin/src/lib/post/components/detail/detail.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Confirmation, ConfirmationService, ToasterService } from '@abp/ng.theme.shared';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport * as _ from 'lodash';\r\n\r\nimport { Fs } from '@fs-tw/cms/proxy';\r\n\r\nimport { PageService } from '../../providers/page.service';\r\nimport { ImageFile, ImagePickerComponent } from '../image-picker/image-picker.component';\r\n\r\n// import { ActivatedRoute, Router } from '@angular/router';\r\n// import { BlogDto, PostImageDto } from '@fs-tw/cms/proxy';\r\n// import { Confirmation, ConfirmationService, ToasterService } from '@abp/ng.theme.shared';\r\n// import { Store } from '@ngxs/store';\r\n// import { forkJoin, Observable } from 'rxjs';\r\n// import { FileService } from '@fs-tw/theme-core';\r\n// import { PageService } from '../../providers/page.service';\r\n// import { PostsStateService } from '../../providers/post/poststate.service';\r\n// import { UploadFileComponent } from '../upload-file/upload-file.component';\r\n// import { TagComponent } from '../tag/tag.component';\r\n// import { finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'fs-detail',\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.less']\r\n})\r\nexport class DetailComponent implements OnInit {\r\n  @ViewChild(\"DefaultImagePicker\") defaultImagePicker : ImagePickerComponent;\r\n\r\n  postId: string;\r\n  data: Fs.Cms.Posts.Dtos.PostDto;\r\n  dateRange: Date[] = [new Date(), new Date()];\r\n  defaultImages: ImageFile[] = [];\r\n\r\n  blogs: Fs.Cms.Blogs.Dtos.BlogDto[] = [];\r\n\r\n  isLoading: boolean = false;\r\n\r\n  coverImage: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private pageService: PageService,\r\n    private confirmationService: ConfirmationService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.postId = this.activatedRoute.snapshot.paramMap.get('postId');\r\n    console.log(this.postId);\r\n\r\n    this.getPost();\r\n    this.getBlogs();\r\n  }\r\n\r\n  getPost() {\r\n    this.data = {\r\n      blogId: null,\r\n      title: '',\r\n      subtitle: '',\r\n      url: '',\r\n      content: '',\r\n      disable: false,\r\n      startTime: '',\r\n      endTime: '',\r\n      displayMode: 0,\r\n      sequence: 0,\r\n      attachmentFileUrls: [],\r\n      postImages: []\r\n    } as Fs.Cms.Posts.Dtos.PostDto;\r\n\r\n    this.dateRange = [new Date(), new Date()];\r\n\r\n    this.defaultImages = [new ImageFile('test', 'https://dummyimage.com/200x130/000/fff')];\r\n    this.coverImage = 'test'\r\n\r\n    if (this.postId) {\r\n      this.pageService.getPostById(this.postId).subscribe((x) => {\r\n        this.data = x;\r\n\r\n        let st = x.startTime ? new Date(x.startTime) : new Date();\r\n        let ed = x.endTime ? new Date(x.endTime) : new Date();\r\n        this.dateRange = [st, ed];\r\n\r\n        this.defaultImages = x.postImages.map(y => new ImageFile(y.url, y.url) );\r\n\r\n        let coverImageIndex = x.postImages.findIndex(y => y.isCover);\r\n        if (coverImageIndex > -1) this.coverImage = x.postImages[coverImageIndex].url;\r\n      })\r\n    }\r\n  }\r\n\r\n  getBlogs() {\r\n    let input = {\r\n      skipCount: 0,\r\n      maxResultCount: 999,\r\n      sorting: 'sequence'\r\n    } as Fs.Cms.Blogs.Dtos.BlogGetListDto;\r\n\r\n    this.pageService.getBlogs(input).subscribe((x) => {\r\n      this.blogs = x.items;\r\n    })\r\n  }\r\n\r\n  deleteFile(fileName: string) {\r\n    this.confirmationService.warn(`確定刪除 ${fileName} 嗎？`, \"系統訊息\")\r\n      .subscribe((result) => {\r\n        if (result != Confirmation.Status.confirm) return;\r\n\r\n        this.defaultImagePicker.deleteFile(fileName);\r\n      })\r\n  }\r\n\r\n  save() {\r\n    let item: Fs.Cms.Posts.Dtos.PostDto = _.cloneDeep(this.data);\r\n    item.startTime = this.dateRange[0].toLocalISOString();\r\n    item.endTime = this.dateRange[1].toLocalISOString();\r\n\r\n    // TODO: 上傳檔案、上傳附件、加標籤\r\n\r\n    let action: Observable<any>;\r\n    if (!this.postId) {\r\n      action = this.pageService.createPost(item);\r\n    } else {\r\n      action = this.pageService.updatePost(this.postId, item);\r\n    }\r\n\r\n    action.subscribe((x) => {\r\n      this.router.navigate([\"cms/post\"]);\r\n    })\r\n    \r\n  }\r\n\r\n  // apiUrl = \"\";\r\n  // @ViewChild(UploadFileComponent) uploadFileComponent: UploadFileComponent;\r\n\r\n  // @ViewChild(TagComponent) tagComponent: TagComponent;\r\n\r\n  // data: any =\r\n  //   { published: true, published_At: new Date(), attachmentFileUrls: [], content: \"\", postImages: [], postTags: [] };\r\n\r\n  // isVisible = false;\r\n  // selectImage = \"\";\r\n  // showList = [];\r\n  // fileList = [];\r\n  // isSpinning = false;\r\n  // blogs: BlogDto[] = []\r\n\r\n\r\n\r\n\r\n  // constructor(\r\n  //   private confirmationService: ConfirmationService,\r\n  //   private toasterService: ToasterService,\r\n  //   private postsStateService: PostsStateService,\r\n  //   private configStateService: ConfigStateService,\r\n  //   private activatedRoute: ActivatedRoute,\r\n  //   private pageService: PageService,\r\n  //   private fileService: FileService,\r\n  //   private environmentService:EnvironmentService,\r\n  //   private router: Router,\r\n  // ) {\r\n\r\n  //   this.apiUrl = this.environmentService.getApiUrl() + \"/\";\r\n  //   this.getBlogs();\r\n  //   this.activatedRoute.params.subscribe(x => {\r\n  //     if (x.id) {\r\n  //       this.isSpinning = true;\r\n  //       this.pageService.getPostById(x[\"id\"]).subscribe(post => {\r\n  //         this.data = post;\r\n  //         this.isSpinning = false;\r\n  //         this.init_list();\r\n  //       })\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n  // getBlogs() {\r\n  //   this.pageService.blogGetList().subscribe(x => {\r\n  //     this.blogs = x;\r\n  //   });\r\n  // }\r\n\r\n  // ngOnDestroy(): void { }\r\n\r\n  // ngOnInit() { }\r\n\r\n  // getUrl(x: string) {\r\n  //   if (x.includes('http')) {\r\n  //     return x;\r\n  //   } else {\r\n  //     return this.fileService.getFileByName(x);\r\n  //   }\r\n  // }\r\n\r\n  // getFileName(x: string) {\r\n  //   let splitStr = x.split(\"\\\\\");\r\n  //   return splitStr[splitStr.length - 1];\r\n  // }\r\n\r\n  // init_list() {\r\n  //   this.fileList = [];\r\n  //   this.showList = this.data.postImages.map((item, index) => {\r\n  //     return {\r\n  //       uid: index.toString(),\r\n  //       status: 'done',\r\n  //       type: \"image/jpeg\",\r\n  //       url: this.getUrl(item.url),\r\n  //       thumbUrl: this.getUrl(item.url),\r\n  //       needDelete: true,\r\n  //       isCover: item.isCover,\r\n  //       name: this.getFileName(item.url),\r\n  //       or_url: item.url\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // save() {\r\n  //   this.isSpinning = true\r\n  //   let mes = \"建立成功！\";\r\n  //   if (this.data.id) mes = \"更新成功！\";\r\n  //   let cover = this.showList.find(x => { return x.isCover == true });\r\n\r\n  //   let result = this.handleUpload()\r\n  //   let im: string[] = this.showList.map(x => x.or_url);\r\n  //   let old_images = this.data.postImages.filter(x => im.some(y => y == x.url));\r\n  //   this.data.postImages = result.concat(old_images);\r\n  //   if (cover) {\r\n  //     this.data.postImages.forEach(x => {\r\n  //       if (x.url.includes(cover.name)) x.isCover = true;\r\n  //       else x.isCover = false;\r\n  //     });\r\n  //   }\r\n  //   this.data.attachmentFileUrls = this.uploadFileComponent.save();\r\n  //   this.data.published_At = new Date(this.data.published_At).toLocalISOString();\r\n  //   let act: Observable<any>;\r\n  //   if (this.data.id) {\r\n  //     act = this.postsStateService.update(this.data, this.data.id);\r\n  //   } else {\r\n  //     act = this.postsStateService.create(this.data);\r\n  //   }\r\n  //   act.subscribe(x => {\r\n  //     forkJoin(this.tagComponent.save(x.id)).pipe(finalize(() => {\r\n  //       this.toasterService.success(mes);\r\n  //       this.isSpinning = false;\r\n  //       this.router.navigate([\"cms/post\"], { queryParams: { blog: this.data.blogCodeId } });\r\n  //     })).subscribe(x => { })\r\n  //   });\r\n  // }\r\n\r\n  // handleUpload(): PostImageDto[] {\r\n  //   const randomName = Array(32).fill(null).map(() => (Math.round(Math.random() * 16)).toString(16)).join('');\r\n  //   const formData = new FormData();\r\n  //   let postImageList: PostImageDto[] = []\r\n  //   this.fileList.forEach((file: any) => {\r\n  //     let url = `cms\\\\posts\\\\${randomName}\\\\${file.name}`;\r\n  //     postImageList.push({ url, isCover: false });\r\n  //     formData.append('files[]', file, url);\r\n  //   });\r\n  //   this.fileService.uploadFileByFormData(formData).subscribe(() => {\r\n  //   }, (error) => {\r\n  //     this.toasterService.error(\"上傳失敗\");\r\n  //   });\r\n\r\n  //   return postImageList;\r\n  // }\r\n\r\n  // refreshStatus(input) {\r\n  //   this.showList.forEach(x => {\r\n  //     if (x.uid != input.uid) x.isCover = false;\r\n  //   });\r\n  // }\r\n}\r\n"]}