{"version":3,"sources":["../../../../libs/cms/proxy/src/fs/abp/file/directories/directories-api.service.ts","../../../../libs/cms/proxy/src/fs/abp/file/files/files-api.service.ts","../../../../libs/cms/proxy/src/fs/cms/blogs/blogs-api.service.ts","../../../../libs/cms/proxy/src/fs/cms/documents/documents-api.service.ts","../../../../libs/cms/proxy/src/fs/cms/posts/display-mode.enum.ts","../../../../libs/cms/proxy/src/fs/cms/posts/posts-api.service.ts","../../../../libs/cms/proxy/src/fs/cms/tags/tags-api.service.ts","../../../../libs/cms/proxy/src/volo/file-management/directories/directory-descriptor.service.ts","../../../../libs/cms/proxy/src/volo/file-management/files/file-icon-type.enum.ts","../../../../libs/cms/proxy/src/volo/file-management/files/file-descriptor.service.ts"],"names":["DirectoriesApiService","restService","_this","this","apiName","findByProviderByKeyAndGroup","key","group","request","method","url","params","getDefinitions","Injectable","args","providedIn","RestService","FilesApiService","getContentById","id","BlogsApiService","createByBlogCreate","BlogCreate","body","deleteByBlogPrimaryKey","BlogPrimaryKey","getByBlogPrimaryKey","getListByBlogGetList","BlogGetList","fields","value","sorting","skipCount","maxResultCount","options","updateByBlogPrimaryKeyAndBlogUpdate","BlogUpdate","DocumentsApiService","getListByDocumentDefinitionGetList","DocumentDefinitionGetList","getListByDocumentGetList","DocumentGetList","DisplayMode","displayModeOptions","mapEnumToOptions","PostsApiService","createByPostCreate","PostCreate","deleteByPostPrimaryKey","PostPrimaryKey","getByPostPrimaryKey","getListByPostGetList","PostGetList","getListByPostTagMapGetList","PostTagMapGetList","getPostsByBlogIdByInput","input","blogId","keyword","updateByPostPrimaryKeyAndPostUpdate","PostUpdate","TagsApiService","createByTagCreate","TagCreate","deleteByTagPrimaryKey","TagPrimaryKey","getByTagPrimaryKey","getListByTagGetList","TagGetList","updateByTagPrimaryKeyAndTagUpdate","TagUpdate","DirectoryDescriptorService","createByInput","deleteById","getById","getContentByInput","filter","getListByParentId","parentId","moveByInput","renameByIdAndInput","FileIconType","FileDescriptorService","downloadById","getListByDirectoryId","directoryId","getPreInfoByInput","fileIconTypeOptions"],"mappings":"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","sourcesContent":["import type { DirectoryDescriptorDto } from './dtos/models';\r\nimport type { DirectoryProviderDefinition } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoriesApiService {\r\n  apiName = 'Default';\r\n\r\n  findByProviderByKeyAndGroup = (key: string, group?: string) =>\r\n    this.restService.request<any, any>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/provider/${key}`,\r\n      params: { group: group },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getDefinitions = () =>\r\n    this.restService.request<any, DirectoryProviderDefinition[]>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/definitions`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n// import type { IActionResult } from '../../../../microsoft/asp-net-core/mvc/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FilesApiService {\r\n  apiName = 'Default';\r\n\r\n  getContentById = (id: string) =>\r\n    this.restService.request<any, any>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/file-content`,\r\n      params: { id: id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { BlogCreateDto, BlogGetListDto, BlogPrimaryKeyDto, BlogUpdateDto, BlogWithDetailsDto, MetaData } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BlogsApiService {\r\n  apiName = 'Default';\r\n\r\n  createByBlogCreate = (BlogCreate: BlogCreateDto) =>\r\n    this.restService.request<any, BlogWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/cms/blogs/blog`,\r\n      body: BlogCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByBlogPrimaryKey = (BlogPrimaryKey: BlogPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/cms/blogs/blog/id`,\r\n      params: { id: BlogPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByBlogPrimaryKey = (BlogPrimaryKey: BlogPrimaryKeyDto) =>\r\n    this.restService.request<any, BlogWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/cms/blogs/blog/id`,\r\n      params: { id: BlogPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByBlogGetList = (BlogGetList: BlogGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<BlogWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/blogs/blog`,\r\n      params: { fields: BlogGetList.fields, value: BlogGetList.value, sorting: BlogGetList.sorting, skipCount: BlogGetList.skipCount, maxResultCount: BlogGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/cms/blogs`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByBlogPrimaryKeyAndBlogUpdate = (BlogPrimaryKey: BlogPrimaryKeyDto, BlogUpdate: BlogUpdateDto) =>\r\n    this.restService.request<any, BlogWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/cms/blogs/blog/id`,\r\n      params: { id: BlogPrimaryKey.id },\r\n      body: BlogUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { DocumentDefinitionGetListDto, DocumentDefinitionWithDetailsDto, DocumentGetListDto, DocumentWithDetailsDto, MetaData } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DocumentsApiService {\r\n  apiName = 'Default';\r\n\r\n  getListByDocumentDefinitionGetList = (DocumentDefinitionGetList: DocumentDefinitionGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<DocumentDefinitionWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/documents/document-definition`,\r\n      params: { fields: DocumentDefinitionGetList.fields, value: DocumentDefinitionGetList.value, sorting: DocumentDefinitionGetList.sorting, skipCount: DocumentDefinitionGetList.skipCount, maxResultCount: DocumentDefinitionGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByDocumentGetList = (DocumentGetList: DocumentGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<DocumentWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/documents/document`,\r\n      params: { fields: DocumentGetList.fields, value: DocumentGetList.value, sorting: DocumentGetList.sorting, skipCount: DocumentGetList.skipCount, maxResultCount: DocumentGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/cms/documents`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum DisplayMode {\r\n  內文 = 0,\r\n  連結 = 1,\r\n}\r\n\r\nexport const displayModeOptions = mapEnumToOptions(DisplayMode);\r\n","import type { GetPostByBlogIdInput, MetaData, PostCreateDto, PostGetListDto, PostPrimaryKeyDto, PostTagMapGetListDto, PostTagMapWithDetailsDto, PostUpdateDto, PostWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostsApiService {\r\n  apiName = 'Default';\r\n\r\n  createByPostCreate = (PostCreate: PostCreateDto) =>\r\n    this.restService.request<any, PostWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/cms/posts/post`,\r\n      body: PostCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByPostPrimaryKey = (PostPrimaryKey: PostPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/cms/posts/post/id`,\r\n      params: { id: PostPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByPostPrimaryKey = (PostPrimaryKey: PostPrimaryKeyDto) =>\r\n    this.restService.request<any, PostWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/cms/posts/post/id`,\r\n      params: { id: PostPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByPostGetList = (PostGetList: PostGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<PostWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/posts/post`,\r\n      params: { fields: PostGetList.fields, value: PostGetList.value, sorting: PostGetList.sorting, skipCount: PostGetList.skipCount, maxResultCount: PostGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByPostTagMapGetList = (PostTagMapGetList: PostTagMapGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<PostTagMapWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/posts/post-tag-map`,\r\n      params: { fields: PostTagMapGetList.fields, value: PostTagMapGetList.value, sorting: PostTagMapGetList.sorting, skipCount: PostTagMapGetList.skipCount, maxResultCount: PostTagMapGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getPostsByBlogIdByInput = (input: GetPostByBlogIdInput) =>\r\n    this.restService.request<any, PagedResultDto<PostWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/posts/get-posts-by-blog-id`,\r\n      params: { blogId: input.blogId, keyword: input.keyword, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/cms/posts`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByPostPrimaryKeyAndPostUpdate = (PostPrimaryKey: PostPrimaryKeyDto, PostUpdate: PostUpdateDto) =>\r\n    this.restService.request<any, PostWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/cms/posts/post/id`,\r\n      params: { id: PostPrimaryKey.id },\r\n      body: PostUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { MetaData, TagCreateDto, TagGetListDto, TagPrimaryKeyDto, TagUpdateDto, TagWithDetailsDto } from './dtos/models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TagsApiService {\r\n  apiName = 'Default';\r\n\r\n  createByTagCreate = (TagCreate: TagCreateDto) =>\r\n    this.restService.request<any, TagWithDetailsDto>({\r\n      method: 'POST',\r\n      url: `/api/cms/tags/tag`,\r\n      body: TagCreate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteByTagPrimaryKey = (TagPrimaryKey: TagPrimaryKeyDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/cms/tags/tag/id`,\r\n      params: { id: TagPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getByTagPrimaryKey = (TagPrimaryKey: TagPrimaryKeyDto) =>\r\n    this.restService.request<any, TagWithDetailsDto>({\r\n      method: 'GET',\r\n      url: `/api/cms/tags/tag/id`,\r\n      params: { id: TagPrimaryKey.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByTagGetList = (TagGetList: TagGetListDto) =>\r\n    this.restService.request<any, PagedResultDto<TagWithDetailsDto>>({\r\n      method: 'GET',\r\n      url: `/api/cms/tags/tag`,\r\n      params: { fields: TagGetList.fields, value: TagGetList.value, sorting: TagGetList.sorting, skipCount: TagGetList.skipCount, maxResultCount: TagGetList.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  options = () =>\r\n    this.restService.request<any, MetaData>({\r\n      method: 'OPTIONS',\r\n      url: `/api/cms/tags`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateByTagPrimaryKeyAndTagUpdate = (TagPrimaryKey: TagPrimaryKeyDto, TagUpdate: TagUpdateDto) =>\r\n    this.restService.request<any, TagWithDetailsDto>({\r\n      method: 'PUT',\r\n      url: `/api/cms/tags/tag/id`,\r\n      params: { id: TagPrimaryKey.id },\r\n      body: TagUpdate,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type {  DirectoryDescriptorDto  } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DirectoryDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: any) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentByInput = (input: any) =>\r\n    this.restService.request<any, PagedResultDto<any>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor`,\r\n      params: { filter: input.filter, sorting: input.sorting, id: input.id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByParentId = (parentId: string) =>\r\n    this.restService.request<any, ListResultDto<any>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/directory-descriptor/sub-directories`,\r\n      params: { parentId: parentId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: any) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: any) =>\r\n    this.restService.request<any, DirectoryDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/directory-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { mapEnumToOptions } from '@abp/ng.core';\r\n\r\nexport enum FileIconType {\r\n  FontAwesome = 0,\r\n  Url = 1,\r\n}\r\n\r\nexport const fileIconTypeOptions = mapEnumToOptions(FileIconType);\r\n","import type { CreateFileInput, FileDescriptorDto, FileUploadPreInfoDto, FileUploadPreInfoRequest, MoveFileInput, RenameFileInput } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { RemoteStreamContent } from '../../abp/content/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FileDescriptorService {\r\n  apiName = 'FileManagement';\r\n\r\n  createByInput = (input: CreateFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  deleteById = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  downloadById = (id: string) =>\r\n    this.restService.request<any, RemoteStreamContent>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/download/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getById = (id: string) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getContentById = (id: string) =>\r\n    this.restService.request<any, number[]>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor/content`,\r\n      params: { id: id },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getListByDirectoryId = (directoryId: string) =>\r\n    this.restService.request<any, ListResultDto<FileDescriptorDto>>({\r\n      method: 'GET',\r\n      url: `/api/file-management/file-descriptor`,\r\n      params: { directoryId: directoryId },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getPreInfoByInput = (input: FileUploadPreInfoRequest[]) =>\r\n    this.restService.request<any, FileUploadPreInfoDto[]>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/pre-upload-info`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  moveByInput = (input: MoveFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/move`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  renameByIdAndInput = (id: string, input: RenameFileInput) =>\r\n    this.restService.request<any, FileDescriptorDto>({\r\n      method: 'POST',\r\n      url: `/api/file-management/file-descriptor/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n"]}