{"version":3,"file":"layout-state.service.js","sourceRoot":"","sources":["../../../../../../../libs/theme-alain-ms/layout/src/lib/services/layout-state.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport { InternalStore, LocalizationPipe } from '@abp/ng.core';\r\nimport {\r\n  Layout,\r\n  MSProduct,\r\n  MSServiceNavConfig,\r\n  SidebarConfig,\r\n} from '../models';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router, RouterStateSnapshot } from '@angular/router';\r\nimport { RoutesProcessor } from './routes.processor';\r\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\r\nimport { findRoute, getRoutePath, RoutesService } from '@abp/ng.core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LayoutStateService {\r\n  private store = new InternalStore({\r\n    isFetching: false,\r\n\r\n    categories: [],\r\n\r\n    navConfig: Layout.defaultNavConfig,\r\n    sidebarConfig: Layout.defaultSidebarConfig,\r\n\r\n    pageNavs: [],\r\n  } as Layout.State);\r\n  //private routerState: RouterStateSnapshot;\r\n  ///必須等待Rouer完成後才能使用，需要當前路徑\r\n  public routesProcessor: RoutesProcessor;\r\n\r\n  getStore$() {\r\n    return this.store.sliceState((state) => state);\r\n  }\r\n\r\n  getFetching$() {\r\n    return this.store.sliceState(({ isFetching }) => isFetching);\r\n  }\r\n\r\n  getCategories() {\r\n    return this.store.state.categories;\r\n  }\r\n\r\n  getCategories$() {\r\n    return this.store.sliceState((state) => state.categories);\r\n  }\r\n  getShortcuts() {\r\n    const categories = this.getCategories();\r\n    const result: MSProduct[] = [];\r\n    categories.forEach((p) => {\r\n      result.push(p as any);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  getShortcuts$() {\r\n    return this.getCategories$().pipe(\r\n      map((x) => {\r\n        const result: MSProduct[] = [];\r\n        x.forEach((p) => {\r\n          result.push(p as any);\r\n        });\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  getNavConfig() {\r\n    return this.store.state.navConfig;\r\n  }\r\n\r\n  getNavConfig$() {\r\n    return this.store.sliceState((state) => state.navConfig);\r\n  }\r\n\r\n  getPageNavs$() {\r\n    return this.store.sliceState((state) => state.pageNavs);\r\n  }\r\n  getPageNavs() {\r\n    return this.store.state.pageNavs;\r\n  }\r\n\r\n  constructor(\r\n    private injector: Injector,\r\n    public localizationPipe: LocalizationPipe\r\n  ) {\r\n    this.routesProcessor = new RoutesProcessor(this.injector);\r\n    this.listenRoutes();\r\n  }\r\n\r\n  setStore(state: Partial<Layout.State>) {\r\n    this.store.patch({ ...state });\r\n  }\r\n\r\n  setFetching(isFetching: boolean) {\r\n    this.store.patch({ isFetching });\r\n  }\r\n\r\n  setNavConfig(navConfig: MSServiceNavConfig) {\r\n    this.store.patch({ navConfig });\r\n    let pageNavs: any;\r\n    if (navConfig.name !== eThemeSharedRouteNames.Administration) {\r\n      pageNavs = this.routesProcessor.GetPageNavs(\r\n        this.routesProcessor.RouterState,\r\n        navConfig\r\n      );\r\n      this.store.state.sidebarConfig.hasPageNav = true;\r\n    } else {\r\n      this.store.state.sidebarConfig.hasPageNav = false;\r\n    }\r\n    this.store.patch({\r\n      pageNavs,\r\n      sidebarConfig: this.store.state.sidebarConfig,\r\n    });\r\n  }\r\n\r\n  fetchPageNavs(routerState: RouterStateSnapshot) {\r\n    this.routesProcessor.RouterState = routerState;\r\n\r\n\r\n    let navConfig: MSServiceNavConfig = this.routesProcessor.MergeRouteData(\r\n      'navConfig',\r\n      {\r\n        ...Layout.defaultNavConfig,\r\n        name: this.routesProcessor.CurrentRoute?.parentName ?? \"\"//eTicketRouteNames.Ticket//\r\n      }\r\n    );\r\n\r\n    let sidebarConfig: SidebarConfig = this.routesProcessor.MergeRouteData(\r\n      'sidebarConfig',\r\n      Layout.defaultSidebarConfig\r\n    );\r\n\r\n    this.setStore({\r\n      sidebarConfig,\r\n    });\r\n\r\n    this.setNavConfig(navConfig);\r\n  }\r\n\r\n  private listenRoutes() {\r\n    this.routesProcessor.Category$.subscribe((categories) => {\r\n      if (!!this.routesProcessor.RouterState) {\r\n        this.fetchPageNavs(this.routesProcessor.RouterState);\r\n      }\r\n\r\n      this.store.patch({\r\n        categories,\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}