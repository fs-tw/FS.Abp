{"version":3,"file":"routes.processor.js","sourceRoot":"","sources":["../../../../../../../libs/theme-alain-ms/layout/src/lib/services/routes.processor.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,IAAI,gBAAgB,EACjC,gBAAgB,GAGjB,MAAM,cAAc,CAAC;AAGtB,OAAO,EAAU,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAW7C,MAAM,OAAO,eAAe;IAiD1B,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAG,CAAC;IAhD1C,IAAY,aAAa;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAED,IAAY,gBAAgB;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAID,IAAI,UAAU;QACZ,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,OAAO,SAAS,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,YAAY;QACd,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CACpC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CACrD,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,IAAY,EAAE,YAAiB;QAC5C,IAAI,MAAM,GAAG,YAAY,CAAC;QAE1B,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;QAC9B,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QACtB,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;YACrB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;YACrB,QAAQ,CAAC,KAAK,CAAC,CAAC;SACjB;QAED,IAAI,KAAK,GAAG,YAAY,CAAC;QACzB,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM,mCAAQ,MAAM,GAAK,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC;SACvC;QACD,OAAO,MAAM,CAAC;QAEd,SAAS,QAAQ,CAAC,IAAI;YACpB,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBACvC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACzB;QACH,CAAC;IACH,CAAC;IAID,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CACrC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACR,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO;YAC3B,OAAO,CAAC;iBACL,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC,CAAC,IAAI,gEAA0C;gBAChD,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAC9B;iBACA,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;iBACtB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC7B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBACT,IAAI,QAAQ,GAAsB;oBAChC,EAAE,EAAE,CAAC,CAAC,IAAI;oBACV,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;oBAC7C,IAAI,EAAE,CAAC,CAAC,SAAS;oBACjB,QAAQ,EAAE,EAAE;oBACZ,IAAI,EAAE,CAAC,CAAC,IAAI;iBACb,CAAC;gBAEF,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ;qBAC3B,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC1C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;oBACT,IAAI,OAAO,GAAc;wBACvB,SAAS,EAAE,CAAC,CAAC,IAAI;wBACjB,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;wBAC7C,IAAI,EAAE,CAAC,CAAC,IAAI;wBACZ,IAAI,EAAE,CAAC,CAAC,SAAS;wBACjB,EAAE,EAAE,CAAC,CAAC,IAAI;qBACX,CAAC;oBACF,OAAO,OAAO,CAAC;gBACjB,CAAC,CAAC,CAAC;gBACL,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEM,WAAW,CAChB,WAAgC,EAChC,GAAuB;QAEvB,IAAI,CAAC,IAAI,CAAC,YAAY;YAAE,OAAO,EAAE,CAAC;QAClC,IAAI,QAAQ,GAAa,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,MAAiB,CAAC;QAEtB,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;QAE5D,IAAI,CAAC,CAAC,MAAM,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;SAC1C;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,SAAS,CAAC,KAAU,EAAC,YAAkB,IAAI;QACjD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,CAAC,QAAQ;aACX,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC1C,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;;YAClB,IAAI,IAAI,GAAW;gBACjB,IAAI,EACF,MAAM,CAAC,WAAW,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;gBACpE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;gBACpC,IAAI,EAAE,MAAM,CAAC,SAAS;gBACtB,QAAQ,EAAE,EAAE;aACb,CAAC;YACF,IAAI,OAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,0CAAE,MAAM,IAAG,CAAC,IAAI,SAAS,EAAE;gBAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAC,KAAK,CAAC,CAAC;aAC9C;YACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QACL,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,YAAY,CACjB,IAAY,EACZ,SAAiC,IAAI,CAAC,WAAW,CAAC,IAAI;QAEtD,IAAI,CAAC,IAAI;YAAE,OAAO,EAAE,CAAC;QACrB,IAAI,MAAM,GAAG,mBAAmB,CAAC;QACjC,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,CAAC,KAAK,EAAE;YACX,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;;gBAC/B,IAAI,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,MAAM,SAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,0CAChE,MAAM,CAAC,SAAS,CAAC,CAAC;gBACtB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,UAAU,CAChB,SAAoD,EACpD,OAAiC;QAEjC,OAAO,OAAO,CAAC,MAAM,CACnB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CACZ,GAAG;YACD,CAAC,CAAC,GAAG;YACL,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC;gBACjB,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EAC/C,IAAI,CACL,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\r\n  RoutesService as AbpRoutesService,\r\n  LocalizationPipe,\r\n  ABP,\r\n  TreeNode,\r\n} from '@abp/ng.core';\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport {\r\n  MSMenu,\r\n  MSProduct,\r\n  MSProductCategory,\r\n  MSServiceNavConfig,\r\n} from '../models';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { eThemeSharedRouteNames } from '@abp/ng.theme.shared';\r\n\r\nexport class RoutesProcessor {\r\n  private get routesService(): AbpRoutesService {\r\n    return this.injector.get(AbpRoutesService);\r\n  }\r\n\r\n  private get localizationPipe(): LocalizationPipe {\r\n    return this.injector.get(LocalizationPipe);\r\n  }\r\n\r\n  public RouterState: RouterStateSnapshot;\r\n\r\n  get CurrentUrl(): string {\r\n    var current_url = this.RouterState.url.split('?')[0];\r\n    return decodeURI(current_url);\r\n  }\r\n\r\n  get CurrentRoute(): TreeNode<ABP.Route> {\r\n    const result = this.routesService.find(\r\n      (x) => this.formatParams(x.path) === this.CurrentUrl\r\n    );\r\n    return result;\r\n  }\r\n\r\n  MergeRouteData(prop: string, defaultValue: any) {\r\n    let result = defaultValue;\r\n\r\n    let targetRoutes = [];\r\n    let route = this.CurrentRoute;\r\n    if (!route) return [];\r\n    pushNode(route);\r\n    while (!!route.parent) {\r\n      route = route.parent;\r\n      pushNode(route);\r\n    }\r\n\r\n    let stack = targetRoutes;\r\n    while (stack.length !== 0) {\r\n      let node = stack.pop();\r\n      result = { ...result, ...node[prop] };\r\n    }\r\n    return result;\r\n\r\n    function pushNode(node) {\r\n      if (!!node && node.hasOwnProperty(prop)) {\r\n        targetRoutes.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  public get Category$(): Observable<MSProductCategory[]> {\r\n    return this.routesService.visible$.pipe(\r\n      map((x) => {\r\n        if (x.length === 0) return;\r\n        return x\r\n          .filter(\r\n            (y) =>\r\n              y.name === eThemeSharedRouteNames.Administration &&\r\n              !this.routesService.hide(y)\r\n          )\r\n          .map((r) => r.children)\r\n          .reduce((a, b) => a.concat(b))\r\n          .map((r) => {\r\n            let category: MSProductCategory = {\r\n              id: r.name,\r\n              name: this.localizationPipe.transform(r.name),\r\n              icon: r.iconClass,\r\n              products: [],\r\n              link: r.path,\r\n            };\r\n\r\n            category.products = r.children\r\n              .filter((c) => !this.routesService.hide(c))\r\n              .map((c) => {\r\n                let product: MSProduct = {\r\n                  productId: c.name,\r\n                  name: this.localizationPipe.transform(c.name),\r\n                  link: c.path,\r\n                  icon: c.iconClass,\r\n                  id: c.name,\r\n                };\r\n                return product;\r\n              });\r\n            return category;\r\n          });\r\n      })\r\n    );\r\n  }\r\n\r\n  public GetPageNavs(\r\n    routerState: RouterStateSnapshot,\r\n    nav: MSServiceNavConfig\r\n  ) {\r\n    if (!this.CurrentRoute) return [];\r\n    let pageNavs: MSMenu[] = [];\r\n    this.RouterState = routerState;\r\n    let target: ABP.Route;\r\n\r\n    target = this.routesService.find((x) => x.name == nav.name);\r\n\r\n    if (!!target) {\r\n      pageNavs.push(...this.transMenu(target));\r\n    }\r\n\r\n    return pageNavs;\r\n  }\r\n\r\n  private transMenu(first: any,recursive:boolean=true) {\r\n    let result = [];\r\n    first.children\r\n      .filter((r) => !this.routesService.hide(r))\r\n      .forEach((second) => {\r\n        let left: MSMenu = {\r\n          text:\r\n            second.displayName || this.localizationPipe.transform(second.name),\r\n          link: this.formatParams(second.path), //(third.url || third.path),\r\n          icon: second.iconClass,\r\n          children: [],\r\n        };\r\n        if (second?.children?.length > 0 && recursive) {\r\n          left.children = this.transMenu(second,false);\r\n        }\r\n        result.push(left);\r\n      });\r\n    return result;\r\n  }\r\n\r\n  public formatParams(\r\n    text: string,\r\n    router: ActivatedRouteSnapshot = this.RouterState.root\r\n  ): string {\r\n    if (!text) return '';\r\n    let regexp = /:([^(:\\/\\-\\ )]+)/g;\r\n    let result = text;\r\n    let match = text.match(regexp);\r\n    if (!!match) {\r\n      text.match(regexp).forEach((i) => {\r\n        let parameter = i.substr(1);\r\n        let itemId = this.findRouter((x) => parameter in x.params, [router])\r\n          ?.params[parameter];\r\n        result = result.replace(':' + parameter, itemId);\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private findRouter(\r\n    predicate: (item: ActivatedRouteSnapshot) => boolean,\r\n    routers: ActivatedRouteSnapshot[]\r\n  ): ActivatedRouteSnapshot {\r\n    return routers.reduce(\r\n      (acc, node) =>\r\n        acc\r\n          ? acc\r\n          : predicate(node)\r\n          ? node\r\n          : this.findRouter(predicate, node.children),\r\n      null\r\n    );\r\n  }\r\n}\r\n"]}