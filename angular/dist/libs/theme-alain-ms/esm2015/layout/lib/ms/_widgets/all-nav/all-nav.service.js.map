{"version":3,"file":"all-nav.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/theme-alain-ms/layout/src/lib/ms/_widgets/all-nav/all-nav.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n// import { I18NService } from '@core';\r\nimport { ALAIN_I18N_TOKEN, _HttpClient } from '@delon/theme';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { ArrayService } from '@delon/util';\r\nimport { MSLink } from '../../../models/layout';\r\nimport { LayoutStateService } from '../../../services/layout-state.service';\r\nimport { RoutesService, LocalizationPipe } from '@abp/ng.core';\r\n\r\nexport interface MSAllNavData {\r\n  nav?: MSAllNav[];\r\n  navBottom?: MSAllNavItem[];\r\n  bottomText?: string;\r\n}\r\n\r\n// tslint:disable-next-line: no-use-before-declare\r\nexport interface MSAllNav extends MSAllNavItem {\r\n  /**\r\n   * 二级菜单\r\n   * - 若指定则 `left`、`right` 失效\r\n   * - 最多只支持一层\r\n   */\r\n  children?: MSAllNav[];\r\n  /**\r\n   * 左边分类\r\n   */\r\n  left?: MSAllNavCategory[];\r\n  /**\r\n   * 左边分类栏数，默认：`4`\r\n   */\r\n  leftColumn?: number;\r\n  /**\r\n   * 分栏后的左边分类，用于渲染\r\n   */\r\n  _left?: MSAllNavCategoryColumn[];\r\n  /**\r\n   * 右边分类\r\n   */\r\n  right?: MSAllNavCategory[];\r\n\r\n  level?: number;\r\n  parent?: MSAllNav;\r\n  active?: boolean;\r\n}\r\n\r\nexport interface MSAllNavCategory {\r\n  text: string;\r\n  list?: MSAllNavItem[];\r\n}\r\n\r\nexport interface MSAllNavCategoryColumn {\r\n  list: MSAllNavCategory[];\r\n  count: number;\r\n  idx: number;\r\n}\r\n\r\nexport interface MSAllNavItem extends MSLink {\r\n  /** 提醒标识，红色字眼，例如：HOT,NEW */\r\n  tip?: string;\r\n}\r\n\r\n/**\r\n * 顶部菜单所有菜单数据，几个注意点：\r\n * - 当前处理的数据源格式为 `./assets/tmp/all-nav-en-US.json`\r\n * - 最终处理数据以 `all-nav.interface.ts` 系列接口为准\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class MSAllNavService {\r\n  private _data!: MSAllNavData;\r\n\r\n  get allL2(): MSAllNav[] {\r\n    return this._data.nav!.filter((w) => w.children && w.children.length > 0);\r\n  }\r\n\r\n  get allPanel(): MSAllNav[] {\r\n    return this._data.nav!.reduce(\r\n      (p: MSAllNav[], c: MSAllNav) =>\r\n        (p = p.concat(c.children ? c.children : c)),\r\n      []\r\n    );\r\n  }\r\n\r\n  getData(): Observable<MSAllNavData> {\r\n    return this._data ? of(this._data) : this.getByHttp();\r\n  }\r\n\r\n  constructor(\r\n    private routesService: RoutesService,\r\n    private localizationPipe: LocalizationPipe,\r\n    private http: _HttpClient,\r\n    private arrSrv: ArrayService //  @Inject(ALAIN_I18N_TOKEN) private i18nSrv: I18NService\r\n  ) {}\r\n\r\n  private fixData(data: MSAllNavData): MSAllNavData {\r\n    const splitColumn = (item: MSAllNav) => {\r\n      if (!item.left) {\r\n        return;\r\n      }\r\n      item.leftColumn = item.leftColumn || 2;\r\n      const columns: MSAllNavCategoryColumn[] = new Array(item.leftColumn)\r\n        .fill({})\r\n        .map((_, idx) => ({\r\n          list: [],\r\n          count: 0,\r\n          idx,\r\n        }));\r\n      item.left\r\n        .filter((w) => w.list)\r\n        .forEach((category) => {\r\n          const idx = [...columns].sort((a, b) => a.count - b.count)[0].idx;\r\n          columns[idx].list.push(category);\r\n          columns[idx].count += category.list!.length;\r\n        });\r\n      item._left = columns;\r\n    };\r\n    data.nav!.forEach((p1) => {\r\n      p1.level = 1;\r\n      if (p1.children) {\r\n        p1.children.forEach((p2) => {\r\n          p2.parent = p1;\r\n          p2.level = 2;\r\n          splitColumn(p2);\r\n        });\r\n      } else {\r\n        splitColumn(p1);\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  private getByHttp(): Observable<MSAllNavData> {\r\n    return this.routesService.tree$.pipe(\r\n      map((r) => {\r\n        let result: MSAllNavData = {\r\n          navBottom: [],\r\n          bottomText: 'Further.',\r\n          nav: [],\r\n        };\r\n        result.nav = r\r\n          .filter((x) => !this.routesService.hide(x))\r\n          .map((x) => {\r\n            let allNav = {\r\n              text: this.localizationPipe.transform(x.name),\r\n              left: [],\r\n            };\r\n            x.children\r\n              .filter((y) => !this.routesService.hide(y))\r\n              .forEach((y) => {\r\n                if (y?.children?.length > 0) {\r\n                  allNav.left.push({\r\n                    text: this.localizationPipe.transform(y.name),\r\n                    list: y.children.map((z) => {\r\n                      return {\r\n                        text: this.localizationPipe.transform(z.name),\r\n                        link: z.path,\r\n                      };\r\n                    }),\r\n                  });\r\n                } else {\r\n                  result.navBottom.push({\r\n                    text: this.localizationPipe.transform(y.name),\r\n                    link: y.path,\r\n                  });\r\n                }\r\n              });\r\n            return allNav;\r\n          });\r\n        this._data = this.fixData(result);\r\n        return this._data;\r\n      })\r\n    );\r\n  }\r\n\r\n  refreshActive(i: MSAllNav): void {\r\n    this.arrSrv.visitTree(this._data.nav!, (item: MSAllNav) => {\r\n      item.active = false;\r\n    });\r\n    while (i) {\r\n      i.active = true;\r\n      i = i.parent!;\r\n    }\r\n  }\r\n}\r\n"]}