{"version":3,"file":"ms.service.js","sourceRoot":"","sources":["../../../../../../../libs/theme-alain-ms/layout/src/lib/ms/ms.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AACtD,OAAO,EAAU,eAAe,EAAe,MAAM,cAAc,CAAC;AACpE,iDAAiD;AACjD,OAAO,EAAE,eAAe,EAAc,MAAM,MAAM,CAAC;;;;AAGnD;;GAEG;AAEH,MAAM,OAAO,YAAY;IAuBvB,aAAa;IAEb,YAAY,EAAsB,EAAU,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;QAxB7D,YAAO,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,CAAC;QACnD,cAAS,GAAG,KAAK,CAAC;QAE1B,2DAA2D;QAClD,cAAS,GAAG,EAAE,CAAC;QAgBxB,YAAO,GAAG,KAAK,CAAC;QAKd,kBAAkB;QAClB,QAAQ,CAAC,SAAS,iCAEb,QAAQ,CAAC,MAAM,KAClB,SAAS,EAAE,IAAI,EACf,UAAU,EAAE,KAAK,EACjB,QAAQ,EAAE,KAAK,IACf,CAAC;QAEH,MAAM,WAAW,GAAG,uCAAuC,CAAC;QAC5D,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7C,CAAC;IA/BD,iBAAiB;IAEjB,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAkB,CAAC;IAC1C,CAAC;IAqBO,UAAU,CAAC,KAAc;QAC/B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,IAAqB,EAAE,KAAW;QAC1C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,MAAe;QACvB,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,MAAe;QACxB,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ,CAAC,MAAe;QACtB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,aAAa,CAAC,OAAe,QAAQ;QACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IAC7B,CAAC;;;;YAtEF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;YAVzB,kBAAkB;YAEV,eAAe","sourcesContent":["import { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Layout, SettingsService, _HttpClient } from '@delon/theme';\r\n//import { environment } from '@env/environment';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { MSLayout } from '../models/layout';\r\n\r\n/**\r\n * 用于维护布局数据\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class BrandService implements OnDestroy {\r\n  private notify$ = new BehaviorSubject<string | null>(null);\r\n  private _isMobile = false;\r\n\r\n  /** 顶部高度，若变更需要同时重新指定 LESS 变量：`@alain-ms-topbar-height` 值 */\r\n  readonly topHeight = 50;\r\n\r\n  // #region fields\r\n\r\n  get notify(): Observable<string | null> {\r\n    return this.notify$.asObservable();\r\n  }\r\n\r\n  get isMobile(): boolean {\r\n    return this._isMobile;\r\n  }\r\n\r\n  get layout(): MSLayout {\r\n    return this.settings.layout as MSLayout;\r\n  }\r\n\r\n  hideNav = false;\r\n\r\n  // #endregion\r\n\r\n  constructor(bm: BreakpointObserver, private settings: SettingsService) {\r\n    // fix layout data\r\n    settings.setLayout({\r\n      //...(environment as any).ay,\r\n      ...settings.layout,\r\n      hasTopbar: true,\r\n      hasSidebar: false,\r\n      hasFixed: false,\r\n    });\r\n\r\n    const mobileMedia = 'only screen and (max-width: 767.99px)';\r\n    bm.observe(mobileMedia).subscribe((state) => this.checkMedia(state.matches));\r\n    this.checkMedia(bm.isMatched(mobileMedia));\r\n  }\r\n\r\n  private checkMedia(value: boolean): void {\r\n    this._isMobile = value;\r\n    this.layout.collapsed = this._isMobile;\r\n    this.notify$.next('mobile');\r\n  }\r\n\r\n  setLayout(name: string | Layout, value?: any): void {\r\n    this.settings.setLayout(name, value);\r\n    this.notify$.next('layout');\r\n  }\r\n\r\n  setTopbar(status: boolean): void {\r\n    this.setLayout('hasTopbar', status);\r\n  }\r\n\r\n  setSidebar(status: boolean): void {\r\n    this.setLayout('hasSidebar', status);\r\n  }\r\n\r\n  setFixed(status: boolean): void {\r\n    this.setLayout('hasFixed', status);\r\n  }\r\n\r\n  triggerNotify(type: string = 'custom'): void {\r\n    this.notify$.next(type);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.notify$.unsubscribe();\r\n  }\r\n}\r\n"]}