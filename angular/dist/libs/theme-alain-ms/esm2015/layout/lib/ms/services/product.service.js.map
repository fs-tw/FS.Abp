{"version":3,"file":"product.service.js","sourceRoot":"","sources":["../../../../../../../../libs/theme-alain-ms/layout/src/lib/ms/services/product.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,UAAU,EAAE,MAAM,eAAe,CAAC;AAGnD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAGvC,OAAO,EAAO,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAU1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;;;AAGzE,MAAM,OAAO,gBAAgB;IA4B3B,YACU,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAC5C,CAAC;IA3BJ,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,IAAI;QACN,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,QAAQ;YACpB,IAAI,EAAE,IAAI;YACV,SAAS,EAAE,0CAA0C;YACrD,QAAQ,EAAE,0CAA0C;YACpD,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,MAAM;SACf,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,IAAI,CACjD,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACR,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAMD,MAAM,CACJ,CAAS;QAET,MAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,IAAI,GAA0B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAEjD,qBAAqB;QACrB,IAAI,OAAO,GAAwB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,EAAE;YACL,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;;gBAC1B,CAAC,CAAC,QAAQ,SAAG,CAAC,CAAC,QAAQ,0CAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;oBACpC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;SACJ;QAED,gCAAgC;QAChC,MAAM,UAAU,GAAwB,EAAE,CAAC;QAC3C,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,OAAO;aACJ,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAS,CAAC,MAAM,GAAG,CAAC,CAAC;aACrC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;YAClB,CAAC,CAAC,GAAG,GAAG,EAAE,MAAM,CAAC;YACjB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,2BAA2B;YAC3B,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBACzD,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;aAC/C;QACH,CAAC,CAAC,CAAC;QAEL,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;;;;YAjEF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;YAFzB,kBAAkB","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\n// import { I18NService } from '@core';\r\nimport { ALAIN_I18N_TOKEN, MenuIcon, _HttpClient } from '@delon/theme';\r\nimport { deepCopy } from '@delon/util';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nimport { MSLink } from '../../models/layout';\r\n\r\nimport {\r\n  RoutesService,\r\n  PermissionService,\r\n  LocalizationPipe,\r\n} from '@abp/ng.core';\r\nimport { MSProduct, MSProductCategory, MSProductI18n } from '../../models';\r\nimport { LayoutStateService } from '../../services/layout-state.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MSProductService {\r\n  private _data!: MSProductCategory[];\r\n\r\n  get data(): MSProductCategory[] {\r\n    return this._data;\r\n  }\r\n\r\n  get i18n(): MSProductI18n {\r\n    return {\r\n      showAll: true,\r\n      keywords: '請輸入關鍵詞',\r\n      allProduct: '查詢全部産品',\r\n      show: true,\r\n      hasResult: '以下是與“<strong>{filterTxt}</strong>”相關的産品：',\r\n      noResult: '未找到與“<strong>{filterTxt}</strong>”相關的産品。',\r\n      text: '産品與服務',\r\n      recent: '最近訪問',\r\n    };\r\n  }\r\n\r\n  getData(): Observable<MSProductCategory[]> {\r\n    return this.layoutSateService.getCategories$().pipe(\r\n      tap((x) => {\r\n        this._data = x;\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor(\r\n    private layoutSateService: LayoutStateService\r\n  ) {}\r\n\r\n  search(\r\n    q: string\r\n  ): { list: MSProductCategory[][]; categories: MSProductCategory[] } {\r\n    const column = 3;\r\n    const list: MSProductCategory[][] = [[], [], []];\r\n\r\n    // Process search key\r\n    let oldList: MSProductCategory[] = deepCopy(this._data);\r\n    if (q) {\r\n      oldList = oldList.map((p) => {\r\n        p.products = p.products?.filter((w) => {\r\n          return w.name.includes(q) || w.id.includes(q);\r\n        });\r\n        return p;\r\n      });\r\n    }\r\n\r\n    // Clean empty children category\r\n    const categories: MSProductCategory[] = [];\r\n    let MockID = 0;\r\n    oldList\r\n      .filter((w) => w.products!.length > 0)\r\n      .forEach((i, idx) => {\r\n        i._id = ++MockID;\r\n        list[idx % column].push(i);\r\n        // Collecting category data\r\n        if (categories.findIndex((w) => w.name === i.name) === -1) {\r\n          categories.push({ _id: i._id, name: i.name });\r\n        }\r\n      });\r\n\r\n    return { list, categories };\r\n  }\r\n}\r\n"]}