{"version":3,"file":"fs-tw-account.js","sources":["../../../../libs/account/src/lib/strategies/auth-flow.strategy.ts","../../../../libs/account/src/lib/services/auth.service.ts","../../../../libs/account/src/lib/components/login/login.component.ts","../../../../libs/account/src/lib/components/manage-profile/manage-profile.component.ts","../../../../libs/account/src/lib/services/account.service.ts","../../../../libs/account/src/lib/components/register/register.component.ts","../../../../libs/account/src/lib/guards/authentication-flow.guard.ts","../../../../libs/account/src/lib/account-routing.module.ts","../../../../libs/account/src/lib/components/auth-wrapper/auth-wrapper.component.ts","../../../../libs/account/src/lib/components/change-password/change-password.component.ts","../../../../libs/account/src/lib/components/personal-settings/personal-settings.component.ts","../../../../libs/account/src/lib/components/tenant-box/tenant-box.component.ts","../../../../libs/account/src/lib/tokens/options.token.ts","../../../../libs/account/src/lib/utils/factory-utils.ts","../../../../libs/account/src/lib/guards/manage-profile.guard.ts","../../../../libs/account/src/lib/account.module.ts","../../../../libs/account/src/fs-tw-account.ts"],"sourcesContent":["import { AbpApplicationConfigurationService, AuthFlowStrategy, ConfigStateService, RestService } from '@abp/ng.core';\r\nimport { Router } from '@angular/router';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nexport const oAuthStorage = localStorage;\r\n\r\nexport class AuthPasswordFlowStrategy extends AuthFlowStrategy {\r\n    readonly isInternalAuth = true;\r\n\r\n    login() {\r\n        const router = this.injector.get(Router);\r\n        router.navigateByUrl('/account/login');\r\n    }\r\n\r\n    checkIfInternalAuth() {\r\n        return true;\r\n    }\r\n\r\n    logout() {\r\n        const rest = this.injector.get(RestService);\r\n        const configStateService = this.injector.get(ConfigStateService);\r\n        const abpApplicationConfigurationService = this.injector.get(AbpApplicationConfigurationService);\r\n        const issuer: string = configStateService.getDeep('environment.oAuthConfig.issuer');\r\n\r\n        return rest\r\n            .request(\r\n                {\r\n                    method: 'GET',\r\n                    url: '/api/account/logout',\r\n                },\r\n                null,\r\n                issuer,\r\n            )\r\n            .pipe(\r\n                tap(() => this.oAuthService.logOut()),\r\n                switchMap(() => {\r\n                    return abpApplicationConfigurationService.get()\r\n                        .pipe(tap(x => configStateService.setState(x)))\r\n                }),\r\n            );\r\n    }\r\n\r\n    destroy() { }\r\n}","import { HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, Observable } from 'rxjs';\r\nimport { switchMap, take, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  EnvironmentService, ConfigStateService,\r\n  AbpApplicationConfigurationService, SessionStateService, AuthFlowStrategy,\r\n  AUTH_FLOW_STRATEGY\r\n} from '@abp/ng.core';\r\nimport { AuthPasswordFlowStrategy } from '../strategies/auth-flow.strategy'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private flow: string;\r\n  private strategy: AuthFlowStrategy;\r\n\r\n  constructor(\r\n    private injector: Injector,\r\n    private environment: EnvironmentService,\r\n    private oAuthService: OAuthService,\r\n    private abpApplicationConfigurationService: AbpApplicationConfigurationService,\r\n    private router: Router,\r\n    private sessionStateService: SessionStateService,\r\n    private configStateService: ConfigStateService,\r\n    @Optional() @Inject('ACCOUNT_OPTIONS') private options: any,\r\n  ) {\r\n    this.setStrategy();\r\n    this.listenToSetEnvironment();\r\n  }\r\n\r\n\r\n  initLogin() {\r\n    this.strategy.login();\r\n  }\r\n\r\n  private setStrategy = () => {\r\n    const flow = this.environment.getEnvironment().oAuthConfig.responseType || 'password';\r\n    if (this.flow === flow) return;\r\n    if (this.strategy) this.strategy.destroy();\r\n    this.flow = flow;\r\n    if (flow === 'password') {\r\n      this.strategy = new AuthPasswordFlowStrategy(this.injector);\r\n    }\r\n    else {\r\n      this.strategy = AUTH_FLOW_STRATEGY.Code(this.injector);\r\n    }\r\n\r\n  };\r\n\r\n\r\n  get isInternalAuth() {\r\n    return this.strategy.isInternalAuth;\r\n  }\r\n\r\n  private listenToSetEnvironment() {\r\n    this.environment.createOnUpdateStream(state => state.oAuthConfig).subscribe(this.setStrategy);\r\n  }\r\n\r\n  async init() {\r\n    return await this.strategy.init();\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.strategy.logout()\r\n  }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    const tenant = this.sessionStateService.getTenant();\r\n\r\n    return from(\r\n      this.oAuthService.fetchTokenUsingPasswordFlow(\r\n        username,\r\n        password,\r\n        new HttpHeaders({ ...(tenant && tenant.id && { __tenant: tenant.id }) }),\r\n      ),\r\n    ).pipe(\r\n      switchMap(() => {\r\n        return this.abpApplicationConfigurationService.get()\r\n          .pipe(tap(x => this.configStateService.setState(x)))\r\n      }),\r\n      tap(() => {\r\n        const redirectUrl =\r\n          snq(() => window.history.state.redirectUrl) || (this.options || {}).redirectUrl || '/';\r\n        this.router.navigateByUrl(redirectUrl)\r\n      }),\r\n      take(1),\r\n    );\r\n\r\n  }\r\n\r\n}\r\n","//import { AuthService, SetRemember, ConfigState } from '@abp/ng.core';\r\nimport { ConfigStateService } from '@abp/ng.core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { eAccountComponents } from '../../enums/components';\r\n\r\nconst { maxLength, minLength, required } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  isSelfRegistrationEnabled = true;\r\n\r\n  authWrapperKey = eAccountComponents.AuthWrapper;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private authService: AuthService,\r\n    private configStateService:ConfigStateService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isSelfRegistrationEnabled =\r\n    (this.configStateService.getSetting('Abp.Account.IsSelfRegistrationEnabled') as string ||'').toLowerCase()!=='false';\r\n\r\n      \r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(128)]],\r\n      remember: [false],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n    this.authService\r\n      .login(this.form.get('username').value, this.form.get('password').value)\r\n      .pipe(\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe(() => {\r\n        //this.store.dispatch(new SetRemember(this.form.get('remember').value));\r\n      });\r\n  }\r\n}\r\n","import { fadeIn } from '@abp/ng.theme.shared';\r\nimport { transition, trigger, useAnimation } from '@angular/animations';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { eAccountComponents } from '../../enums/components';\r\nimport { Store } from '@ngxs/store';\r\nimport { GetProfile, ProfileState } from '@abp/ng.core';\r\n\r\n@Component({\r\n  selector: 'abp-manage-profile',\r\n  templateUrl: './manage-profile.component.html',\r\n  animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],\r\n  styles: [\r\n    `\r\n      .min-h-400 {\r\n        min-height: 400px;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class ManageProfileComponent implements OnInit {\r\n  selectedTab = 0;\r\n\r\n  changePasswordKey = eAccountComponents.ChangePassword;\r\n\r\n  personalSettingsKey = eAccountComponents.PersonalSettings;\r\n\r\n  isProfileLoaded: boolean;\r\n\r\n  hideChangePasswordTab: boolean;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.store.dispatch(new GetProfile()).subscribe(() => {\r\n      this.isProfileLoaded = true;\r\n      if (this.store.selectSnapshot(ProfileState.getProfile).isExternal) {\r\n        this.hideChangePasswordTab = true;\r\n        this.selectedTab = 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { RegisterResponse, RegisterRequest, TenantIdResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService {\r\n  apiName = 'AbpAccount';\r\n\r\n  constructor(private rest: RestService) {}\r\n\r\n  findTenant(tenantName: string): Observable<TenantIdResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/abp/multi-tenancy/tenants/by-name/${tenantName}`,\r\n    };\r\n\r\n    return this.rest.request<null, TenantIdResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  register(body: RegisterRequest): Observable<RegisterResponse> {\r\n    const request: Rest.Request<RegisterRequest> = {\r\n      method: 'POST',\r\n      url: '/api/account/register',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<RegisterRequest, RegisterResponse>(request, {\r\n      skipHandleError: true,\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n}\r\n","//import { AuthService, ConfigState } from '@abp/ng.core';\r\nimport { AuthService } from '../../services/auth.service'\r\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, Injector, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize, switchMap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { RegisterRequest } from '../../models';\r\nimport { AccountService } from '../../services/account.service';\r\nimport { eAccountComponents } from '../../enums/components';\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  isSelfRegistrationEnabled = true;\r\n\r\n  authWrapperKey = eAccountComponents.AuthWrapper;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private accountService: AccountService,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private authService: AuthService,\r\n    private injector: Injector,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // this.isSelfRegistrationEnabled =\r\n    //   (\r\n    //     this.store.selectSnapshot(\r\n    //       ConfigState.getSetting('Abp.Account.IsSelfRegistrationEnabled'),\r\n    //     ) || ''\r\n    //   ).toLowerCase() !== 'false';\r\n    // if (!this.isSelfRegistrationEnabled) {\r\n    //   this.toasterService.warn(\r\n    //     {\r\n    //       key: 'AbpAccount::SelfRegistrationDisabledMessage',\r\n    //       defaultValue: 'Self registration is disabled.',\r\n    //     },\r\n    //     null,\r\n    //     { life: 10000 },\r\n    //   );\r\n    //   return;\r\n    // }\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, ...getPasswordValidators(this.injector)]],\r\n      email: ['', [required, email]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n\r\n    const newUser = {\r\n      userName: this.form.get('username').value,\r\n      password: this.form.get('password').value,\r\n      emailAddress: this.form.get('email').value,\r\n      appName: 'Angular',\r\n    } as RegisterRequest;\r\n\r\n    this.accountService\r\n      .register(newUser)\r\n      .pipe(\r\n        switchMap(() => this.authService.login(newUser.userName, newUser.password)),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","//import { AuthService } from '@abp/ng.core';\r\nimport { AuthService } from '../services/auth.service'\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthenticationFlowGuard implements CanActivate {\r\n  constructor(private authService: AuthService) { }\r\n\r\n  canActivate() {\r\n    if (this.authService.isInternalAuth) return true;\r\n\r\n    this.authService.initLogin();\r\n    return false;\r\n  }\r\n}\r\n","import {\r\n  DynamicLayoutComponent,\r\n  AuthGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { eAccountComponents } from './enums/components';\r\nimport { AuthenticationFlowGuard } from './guards/authentication-flow.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        component: ReplaceableRouteContainerComponent,\r\n        canActivate: [AuthenticationFlowGuard],\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.Login,\r\n            defaultComponent: LoginComponent,\r\n          } as ReplaceableComponents.RouteData<LoginComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: ReplaceableRouteContainerComponent,\r\n        canActivate: [AuthenticationFlowGuard],\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.Register,\r\n            defaultComponent: RegisterComponent,\r\n          } as ReplaceableComponents.RouteData<RegisterComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'manage-profile',\r\n        component: ReplaceableRouteContainerComponent,\r\n        canActivate: [AuthGuard],\r\n        data: {\r\n          replaceableComponent: {\r\n            key: eAccountComponents.ManageProfile,\r\n            defaultComponent: ManageProfileComponent,\r\n          } as ReplaceableComponents.RouteData<ManageProfileComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n","import { ConfigState, SubscriptionService, MultiTenancyService, ConfigStateService } from '@abp/ng.core';\r\nimport { Component, Input, OnInit, TemplateRef } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { eAccountComponents } from '../../enums/components';\r\nimport { Account } from '../../models/account';\r\n\r\n@Component({\r\n  selector: 'abp-auth-wrapper',\r\n  templateUrl: './auth-wrapper.component.html',\r\n  exportAs: 'abpAuthWrapper',\r\n  providers: [SubscriptionService],\r\n})\r\nexport class AuthWrapperComponent\r\n  implements Account.AuthWrapperComponentInputs, Account.AuthWrapperComponentOutputs, OnInit {\r\n  @Input()\r\n  readonly mainContentRef: TemplateRef<any>;\r\n\r\n  @Input()\r\n  readonly cancelContentRef: TemplateRef<any>;\r\n\r\n  isMultiTenancyEnabled$: Observable<boolean>;\r\n\r\n  enableLocalLogin = true;\r\n\r\n  tenantBoxKey = eAccountComponents.TenantBox;\r\n\r\n  constructor(\r\n    public readonly multiTenancy: MultiTenancyService,\r\n    private store: Store,\r\n    private subscription: SubscriptionService,\r\n    private configStateService: ConfigStateService\r\n  ) {\r\n    this.isMultiTenancyEnabled$ = this.configStateService.getDeep$('multiTenancy.isEnabled');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subscription.addOne(\r\n      this.configStateService.getSetting$('Abp.Account.EnableLocalLogin'),\r\n      value => {\r\n        if (value) {\r\n          this.enableLocalLogin = value.toLowerCase() !== 'false';\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n","import { ChangePassword, ProfileState } from '@abp/ng.core';\r\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, Injector, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { comparePasswords, Validation } from '@ngx-validate/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { required } = Validators;\r\n\r\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\r\n\r\n@Component({\r\n  selector: 'abp-change-password-form',\r\n  templateUrl: './change-password.component.html',\r\n  exportAs: 'abpChangePasswordForm',\r\n})\r\nexport class ChangePasswordComponent\r\n  implements OnInit, Account.ChangePasswordComponentInputs, Account.ChangePasswordComponentOutputs {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  hideCurrentPassword: boolean;\r\n\r\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\r\n    if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0) return errors;\r\n\r\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private injector: Injector,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.hideCurrentPassword = !this.store.selectSnapshot(ProfileState.getProfile).hasPassword;\r\n\r\n    const passwordValidations = getPasswordValidators(this.injector);\r\n\r\n    this.form = this.fb.group(\r\n      {\r\n        password: ['', required],\r\n        newPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n        repeatNewPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        validators: [comparePasswords(PASSWORD_FIELDS)],\r\n      },\r\n    );\r\n\r\n    if (this.hideCurrentPassword) this.form.removeControl('password');\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(\r\n        new ChangePassword({\r\n          ...(!this.hideCurrentPassword && { currentPassword: this.form.get('password').value }),\r\n          newPassword: this.form.get('newPassword').value,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe({\r\n        next: () => {\r\n          this.form.reset();\r\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {\r\n            life: 5000,\r\n          });\r\n\r\n          if (this.hideCurrentPassword) {\r\n            this.hideCurrentPassword = false;\r\n            this.form.addControl('password', new FormControl('', [required]));\r\n          }\r\n        },\r\n        error: err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n          );\r\n        },\r\n      });\r\n  }\r\n}\r\n","import { ProfileState, UpdateProfile } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-personal-settings-form',\r\n  templateUrl: './personal-settings.component.html',\r\n  exportAs: 'abpPersonalSettingsForm',\r\n})\r\nexport class PersonalSettingsComponent\r\n  implements\r\n    OnInit,\r\n    Account.PersonalSettingsComponentInputs,\r\n    Account.PersonalSettingsComponentOutputs {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm() {\r\n    const profile = this.store.selectSnapshot(ProfileState.getProfile);\r\n\r\n    this.form = this.fb.group({\r\n      userName: [profile.userName, [required, maxLength(256)]],\r\n      email: [profile.email, [required, email, maxLength(256)]],\r\n      name: [profile.name || '', [maxLength(64)]],\r\n      surname: [profile.surname || '', [maxLength(64)]],\r\n      phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(new UpdateProfile(this.form.value))\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe(() => {\r\n        this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\r\n      });\r\n  }\r\n}\r\n","// import { ABP, GetAppConfiguration, SessionState, SetTenant } from '@abp/ng.core';\r\nimport { ABP, SessionStateService, CurrentTenantDto, SubscriptionService, AbpApplicationConfigurationService,ConfigStateService } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, take, tap } from 'rxjs/operators';\r\nimport { Account } from '../../models/account';\r\nimport { AccountService } from '../../services/account.service';\r\n\r\n@Component({\r\n  selector: 'abp-tenant-box',\r\n  templateUrl: './tenant-box.component.html',\r\n})\r\nexport class TenantBoxComponent\r\n  implements Account.TenantBoxComponentInputs, Account.TenantBoxComponentOutputs {\r\n\r\n  currentTenant$: Observable<CurrentTenantDto>;\r\n\r\n  name: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  modalBusy: boolean;\r\n\r\n  constructor(\r\n    private toasterService: ToasterService,\r\n    private accountService: AccountService,\r\n    private sessionStateService: SessionStateService,\r\n    private subscriptionService: SubscriptionService,\r\n    private abpApplicationConfigurationService: AbpApplicationConfigurationService,\r\n    private configStateService: ConfigStateService\r\n  ) {\r\n    this.currentTenant$ = this.sessionStateService.getTenant$()\r\n  }\r\n\r\n  onSwitch() {\r\n    const tenant = this.sessionStateService.getTenant();//this.store.selectSnapshot(SessionState.getTenant);\r\n    this.name = (tenant || ({} as ABP.BasicItem)).name;\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  save() {\r\n    if (!this.name) {\r\n      this.setTenant(null);\r\n      this.isModalVisible = false;\r\n      return;\r\n    }\r\n\r\n    this.modalBusy = true;\r\n    this.accountService\r\n      .findTenant(this.name)\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(({ success, tenantId: id, name }) => {\r\n        if (!success) {\r\n          this.showError();\r\n          return;\r\n        }\r\n\r\n        this.setTenant({ id, name });\r\n        this.isModalVisible = false;\r\n      });\r\n  }\r\n\r\n  private setTenant(tenant: ABP.BasicItem) {\r\n    this.sessionStateService.setTenant(tenant as CurrentTenantDto);\r\n    this.subscriptionService.addOne(\r\n      this.sessionStateService.getTenant$(),\r\n      (x) => {\r\n        this.abpApplicationConfigurationService.get().pipe(tap(x => this.configStateService.setState(x))).subscribe();\r\n      });\r\n  }\r\n\r\n  private showError() {\r\n    this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {\r\n      messageLocalizationParams: [this.name],\r\n    });\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Options } from '../models/options';\r\n\r\nexport const ACCOUNT_OPTIONS = new InjectionToken<Options>('ACCOUNT_OPTIONS');\r\n","import { Options } from '../models/options';\r\n\r\nexport function accountOptionsFactory(options: Options) {\r\n  return {\r\n    redirectUrl: '/',\r\n    ...options,\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { ConfigStateService } from '@abp/ng.core';\r\nimport { EnvironmentService } from '@abp/ng.core';\r\n\r\n@Injectable()\r\nexport class ManageProfileGuard implements CanActivate {\r\n  constructor(private environmentService: EnvironmentService) {}\r\n\r\n  canActivate(_: ActivatedRouteSnapshot, __: RouterStateSnapshot) {\r\n    const env = this.environmentService.getEnvironment();\r\n    if (env.oAuthConfig.responseType === 'code') {\r\n      window.location.href = `${env.oAuthConfig.issuer}/Account/Manage?returnUrl=${window.location.href}`;\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { AuthWrapperComponent } from './components/auth-wrapper/auth-wrapper.component';\r\nimport { ChangePasswordComponent } from './components/change-password/change-password.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { PersonalSettingsComponent } from './components/personal-settings/personal-settings.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { TenantBoxComponent } from './components/tenant-box/tenant-box.component';\r\nimport { Options } from './models/options';\r\nimport { ACCOUNT_OPTIONS } from './tokens/options.token';\r\nimport { accountOptionsFactory } from './utils/factory-utils';\r\nimport { AuthenticationFlowGuard } from './guards/authentication-flow.guard';\r\nimport { ManageProfileGuard } from './guards/manage-profile.guard';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AuthWrapperComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TenantBoxComponent,\r\n    ChangePasswordComponent,\r\n    ManageProfileComponent,\r\n    PersonalSettingsComponent,\r\n  ],\r\n  imports: [\r\n    CoreModule,\r\n    AccountRoutingModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    NgxValidateCoreModule,\r\n  ],\r\n  exports: [],\r\n})\r\nexport class AccountModule {\r\n  static forChild(options: Options): ModuleWithProviders<AccountModule> {\r\n    return {\r\n      ngModule: AccountModule,\r\n      providers: [\r\n        AuthenticationFlowGuard,\r\n        ManageProfileGuard,\r\n        { provide: ACCOUNT_OPTIONS, useValue: options },\r\n        {\r\n          provide: 'ACCOUNT_OPTIONS',\r\n          useFactory: accountOptionsFactory,\r\n          deps: [ACCOUNT_OPTIONS],\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  static forLazy(options: Options): NgModuleFactory<AccountModule> {\r\n    return new LazyModuleFactory(AccountModule.forChild(options));\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AccountRoutingModule as ɵj} from './lib/account-routing.module';\nexport {AuthWrapperComponent as ɵa} from './lib/components/auth-wrapper/auth-wrapper.component';\nexport {ChangePasswordComponent as ɵg} from './lib/components/change-password/change-password.component';\nexport {LoginComponent as ɵb} from './lib/components/login/login.component';\nexport {ManageProfileComponent as ɵh} from './lib/components/manage-profile/manage-profile.component';\nexport {PersonalSettingsComponent as ɵi} from './lib/components/personal-settings/personal-settings.component';\nexport {RegisterComponent as ɵd} from './lib/components/register/register.component';\nexport {TenantBoxComponent as ɵf} from './lib/components/tenant-box/tenant-box.component';\nexport {eAccountComponents as ɵl} from './lib/enums/components';\nexport {AuthenticationFlowGuard as ɵk} from './lib/guards/authentication-flow.guard';\nexport {ManageProfileGuard as ɵm} from './lib/guards/manage-profile.guard';\nexport {AccountService as ɵe} from './lib/services/account.service';\nexport {AuthService as ɵc} from './lib/services/auth.service';\nexport {ACCOUNT_OPTIONS as ɵn} from './lib/tokens/options.token';\nexport {accountOptionsFactory as ɵo} from './lib/utils/factory-utils';"],"names":["maxLength","required","email"],"mappings":"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"}