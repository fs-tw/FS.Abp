{"version":3,"file":"tenant-box.component.js","sourceRoot":"","sources":["../../../../../../../libs/account/src/lib/components/tenant-box/tenant-box.component.ts"],"names":[],"mappings":"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","sourcesContent":["// import { ABP, GetAppConfiguration, SessionState, SetTenant } from '@abp/ng.core';\r\nimport { ABP, SessionStateService, CurrentTenantDto, SubscriptionService, AbpApplicationConfigurationService,ConfigStateService } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, take, tap } from 'rxjs/operators';\r\nimport { Account } from '../../models/account';\r\nimport { AccountService } from '../../services/account.service';\r\n\r\n@Component({\r\n  selector: 'abp-tenant-box',\r\n  templateUrl: './tenant-box.component.html',\r\n})\r\nexport class TenantBoxComponent\r\n  implements Account.TenantBoxComponentInputs, Account.TenantBoxComponentOutputs {\r\n\r\n  currentTenant$: Observable<CurrentTenantDto>;\r\n\r\n  name: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  modalBusy: boolean;\r\n\r\n  constructor(\r\n    private toasterService: ToasterService,\r\n    private accountService: AccountService,\r\n    private sessionStateService: SessionStateService,\r\n    private subscriptionService: SubscriptionService,\r\n    private abpApplicationConfigurationService: AbpApplicationConfigurationService,\r\n    private configStateService: ConfigStateService\r\n  ) {\r\n    this.currentTenant$ = this.sessionStateService.getTenant$()\r\n  }\r\n\r\n  onSwitch() {\r\n    const tenant = this.sessionStateService.getTenant();//this.store.selectSnapshot(SessionState.getTenant);\r\n    this.name = (tenant || ({} as ABP.BasicItem)).name;\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  save() {\r\n    if (!this.name) {\r\n      this.setTenant(null);\r\n      this.isModalVisible = false;\r\n      return;\r\n    }\r\n\r\n    this.modalBusy = true;\r\n    this.accountService\r\n      .findTenant(this.name)\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(({ success, tenantId: id, name }) => {\r\n        if (!success) {\r\n          this.showError();\r\n          return;\r\n        }\r\n\r\n        this.setTenant({ id, name });\r\n        this.isModalVisible = false;\r\n      });\r\n  }\r\n\r\n  private setTenant(tenant: ABP.BasicItem) {\r\n    this.sessionStateService.setTenant(tenant as CurrentTenantDto);\r\n    this.subscriptionService.addOne(\r\n      this.sessionStateService.getTenant$(),\r\n      (x) => {\r\n        this.abpApplicationConfigurationService.get().pipe(tap(x => this.configStateService.setState(x))).subscribe();\r\n      });\r\n  }\r\n\r\n  private showError() {\r\n    this.toasterService.error('AbpUiMultiTenancy::GivenTenantIsNotAvailable', 'AbpUi::Error', {\r\n      messageLocalizationParams: [this.name],\r\n    });\r\n  }\r\n}\r\n"]}