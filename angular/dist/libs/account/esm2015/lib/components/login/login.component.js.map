{"version":3,"file":"login.component.js","sourceRoot":"","sources":["../../../../../../../libs/account/src/lib/components/login/login.component.ts"],"names":[],"mappings":"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","sourcesContent":["//import { AuthService, SetRemember, ConfigState } from '@abp/ng.core';\r\nimport { ConfigStateService } from '@abp/ng.core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { eAccountComponents } from '../../enums/components';\r\n\r\nconst { maxLength, minLength, required } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  isSelfRegistrationEnabled = true;\r\n\r\n  authWrapperKey = eAccountComponents.AuthWrapper;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private authService: AuthService,\r\n    private configStateService:ConfigStateService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.isSelfRegistrationEnabled =\r\n    (this.configStateService.getSetting('Abp.Account.IsSelfRegistrationEnabled') as string ||'').toLowerCase()!=='false';\r\n\r\n      \r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(128)]],\r\n      remember: [false],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n    this.authService\r\n      .login(this.form.get('username').value, this.form.get('password').value)\r\n      .pipe(\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe(() => {\r\n        //this.store.dispatch(new SetRemember(this.form.get('remember').value));\r\n      });\r\n  }\r\n}\r\n"]}