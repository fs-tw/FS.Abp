{"version":3,"file":"change-password.component.js","sourceRoot":"","sources":["../../../../../../../libs/account/src/lib/components/change-password/change-password.component.ts","../../../../../../../libs/account/src/lib/components/change-password/change-password.component.html"],"names":[],"mappings":"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","sourcesContent":["import { ChangePassword, ProfileState } from '@abp/ng.core';\r\nimport { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, Injector, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { comparePasswords, Validation } from '@ngx-validate/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { finalize } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { Account } from '../../models/account';\r\n\r\nconst { required } = Validators;\r\n\r\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\r\n\r\n@Component({\r\n  selector: 'abp-change-password-form',\r\n  templateUrl: './change-password.component.html',\r\n  exportAs: 'abpChangePasswordForm',\r\n})\r\nexport class ChangePasswordComponent\r\n  implements OnInit, Account.ChangePasswordComponentInputs, Account.ChangePasswordComponentOutputs {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  hideCurrentPassword: boolean;\r\n\r\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\r\n    if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0) return errors;\r\n\r\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private injector: Injector,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.hideCurrentPassword = !this.store.selectSnapshot(ProfileState.getProfile).hasPassword;\r\n\r\n    const passwordValidations = getPasswordValidators(this.injector);\r\n\r\n    this.form = this.fb.group(\r\n      {\r\n        password: ['', required],\r\n        newPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n        repeatNewPassword: [\r\n          '',\r\n          {\r\n            validators: [required, ...passwordValidations],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        validators: [comparePasswords(PASSWORD_FIELDS)],\r\n      },\r\n    );\r\n\r\n    if (this.hideCurrentPassword) this.form.removeControl('password');\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    this.inProgress = true;\r\n    this.store\r\n      .dispatch(\r\n        new ChangePassword({\r\n          ...(!this.hideCurrentPassword && { currentPassword: this.form.get('password').value }),\r\n          newPassword: this.form.get('newPassword').value,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.inProgress = false)))\r\n      .subscribe({\r\n        next: () => {\r\n          this.form.reset();\r\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', '', {\r\n            life: 5000,\r\n          });\r\n\r\n          if (this.hideCurrentPassword) {\r\n            this.hideCurrentPassword = false;\r\n            this.form.addControl('password', new FormControl('', [required]));\r\n          }\r\n        },\r\n        error: err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n          );\r\n        },\r\n      });\r\n  }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" [mapErrorsFn]=\"mapErrorsFn\" validateOnSubmit>\r\n  <div *ngIf=\"!hideCurrentPassword\" class=\"form-group\">\r\n    <label for=\"current-password\">{{\r\n      'AbpIdentity::DisplayName:CurrentPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"current-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autofocus\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"new-password\">{{ 'AbpIdentity::DisplayName:NewPassword' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"newPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"confirm-new-password\">{{\r\n      'AbpIdentity::DisplayName:NewPasswordConfirm' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"confirm-new-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"repeatNewPassword\"\r\n      autocomplete=\"new-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    buttonType=\"submit\"\r\n    [loading]=\"inProgress\"\r\n    [disabled]=\"form?.invalid\"\r\n    >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n"]}